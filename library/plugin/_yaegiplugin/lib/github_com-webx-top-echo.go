// Code generated by 'yaegi extract github.com/webx-top/echo'. DO NOT EDIT.

package lib

import (
	"context"
	"github.com/admpub/events"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/code"
	"github.com/webx-top/echo/engine"
	"github.com/webx-top/echo/logger"
	"github.com/webx-top/echo/param"
	"go/constant"
	"go/token"
	"html/template"
	"io"
	"mime/multipart"
	"net/http"
	"reflect"
	"regexp"
	"time"
)

func init() {
	Symbols["github.com/webx-top/echo/echo"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AddListener":                          reflect.ValueOf(echo.AddListener),
		"ArrayFieldNameFormatter":              reflect.ValueOf(&echo.ArrayFieldNameFormatter).Elem(),
		"AsError":                              reflect.ValueOf(echo.AsError),
		"AsStdContext":                         reflect.ValueOf(echo.AsStdContext),
		"AsStore":                              reflect.ValueOf(&echo.AsStore).Elem(),
		"Bool":                                 reflect.ValueOf(echo.Bool),
		"CONNECT":                              reflect.ValueOf(constant.MakeFromLiteral("\"CONNECT\"", token.STRING, 0)),
		"CSS":                                  reflect.ValueOf(echo.CSS),
		"CacheControlPrefix":                   reflect.ValueOf(constant.MakeFromLiteral("\"public, max-age=\"", token.STRING, 0)),
		"CaptureTokens":                        reflect.ValueOf(echo.CaptureTokens),
		"CaptureTokensByValues":                reflect.ValueOf(echo.CaptureTokensByValues),
		"CharsetUTF8":                          reflect.ValueOf(constant.MakeFromLiteral("\"charset=utf-8\"", token.STRING, 0)),
		"Children":                             reflect.ValueOf(echo.Children),
		"Clear":                                reflect.ValueOf(echo.Clear),
		"ContentTypeByExtension":               reflect.ValueOf(echo.ContentTypeByExtension),
		"ContentTypeHTML":                      reflect.ValueOf(constant.MakeFromLiteral("\"html\"", token.STRING, 0)),
		"ContentTypeJSON":                      reflect.ValueOf(constant.MakeFromLiteral("\"json\"", token.STRING, 0)),
		"ContentTypeJSONP":                     reflect.ValueOf(constant.MakeFromLiteral("\"jsonp\"", token.STRING, 0)),
		"ContentTypeText":                      reflect.ValueOf(constant.MakeFromLiteral("\"text\"", token.STRING, 0)),
		"ContentTypeXML":                       reflect.ValueOf(constant.MakeFromLiteral("\"xml\"", token.STRING, 0)),
		"CookieExpires":                        reflect.ValueOf(echo.CookieExpires),
		"CookieMaxAge":                         reflect.ValueOf(echo.CookieMaxAge),
		"CookieSameSite":                       reflect.ValueOf(echo.CookieSameSite),
		"CopyCookieOptions":                    reflect.ValueOf(echo.CopyCookieOptions),
		"DELETE":                               reflect.ValueOf(constant.MakeFromLiteral("\"DELETE\"", token.STRING, 0)),
		"DateTime":                             reflect.ValueOf(echo.DateTime),
		"DateTimeStringer":                     reflect.ValueOf(&echo.DateTimeStringer).Elem(),
		"DateToTimestamp":                      reflect.ValueOf(&echo.DateToTimestamp).Elem(),
		"Decr":                                 reflect.ValueOf(echo.Decr),
		"DefaultAcceptFormats":                 reflect.ValueOf(&echo.DefaultAcceptFormats).Elem(),
		"DefaultBinderDecoders":                reflect.ValueOf(&echo.DefaultBinderDecoders).Elem(),
		"DefaultBinderValueDecoders":           reflect.ValueOf(&echo.DefaultBinderValueDecoders).Elem(),
		"DefaultBinderValueEncoders":           reflect.ValueOf(&echo.DefaultBinderValueEncoders).Elem(),
		"DefaultCookieOptions":                 reflect.ValueOf(&echo.DefaultCookieOptions).Elem(),
		"DefaultDebugSession":                  reflect.ValueOf(&echo.DefaultDebugSession).Elem(),
		"DefaultDebugTransaction":              reflect.ValueOf(&echo.DefaultDebugTransaction).Elem(),
		"DefaultFieldNameFormatter":            reflect.ValueOf(&echo.DefaultFieldNameFormatter).Elem(),
		"DefaultFormatRenderers":               reflect.ValueOf(&echo.DefaultFormatRenderers).Elem(),
		"DefaultHTMLFilter":                    reflect.ValueOf(&echo.DefaultHTMLFilter).Elem(),
		"DefaultNextURLVarName":                reflect.ValueOf(&echo.DefaultNextURLVarName).Elem(),
		"DefaultNopFilter":                     reflect.ValueOf(&echo.DefaultNopFilter).Elem(),
		"DefaultNopSession":                    reflect.ValueOf(&echo.DefaultNopSession).Elem(),
		"DefaultNopTransaction":                reflect.ValueOf(&echo.DefaultNopTransaction).Elem(),
		"DefaultNopTranslate":                  reflect.ValueOf(&echo.DefaultNopTranslate).Elem(),
		"DefaultNopValidate":                   reflect.ValueOf(&echo.DefaultNopValidate).Elem(),
		"DefaultRenderDataWrapper":             reflect.ValueOf(echo.DefaultRenderDataWrapper),
		"DefaultSession":                       reflect.ValueOf(&echo.DefaultSession).Elem(),
		"DefaultSessionOptions":                reflect.ValueOf(&echo.DefaultSessionOptions).Elem(),
		"DefaultSkipper":                       reflect.ValueOf(echo.DefaultSkipper),
		"Delete":                               reflect.ValueOf(echo.Delete),
		"DetectError":                          reflect.ValueOf(echo.DetectError),
		"Dump":                                 reflect.ValueOf(echo.Dump),
		"E":                                    reflect.ValueOf(echo.E),
		"ErrBadRequest":                        reflect.ValueOf(&echo.ErrBadRequest).Elem(),
		"ErrBreak":                             reflect.ValueOf(&echo.ErrBreak).Elem(),
		"ErrConflict":                          reflect.ValueOf(&echo.ErrConflict).Elem(),
		"ErrContinue":                          reflect.ValueOf(&echo.ErrContinue).Elem(),
		"ErrExit":                              reflect.ValueOf(&echo.ErrExit).Elem(),
		"ErrExpectationFailed":                 reflect.ValueOf(&echo.ErrExpectationFailed).Elem(),
		"ErrFailedDependency":                  reflect.ValueOf(&echo.ErrFailedDependency).Elem(),
		"ErrForbidden":                         reflect.ValueOf(&echo.ErrForbidden).Elem(),
		"ErrGone":                              reflect.ValueOf(&echo.ErrGone).Elem(),
		"ErrInvalidRedirectCode":               reflect.ValueOf(&echo.ErrInvalidRedirectCode).Elem(),
		"ErrLengthRequired":                    reflect.ValueOf(&echo.ErrLengthRequired).Elem(),
		"ErrLocked":                            reflect.ValueOf(&echo.ErrLocked).Elem(),
		"ErrMethodNotAllowed":                  reflect.ValueOf(&echo.ErrMethodNotAllowed).Elem(),
		"ErrNoSetValidator":                    reflect.ValueOf(&echo.ErrNoSetValidator).Elem(),
		"ErrNotAcceptable":                     reflect.ValueOf(&echo.ErrNotAcceptable).Elem(),
		"ErrNotFound":                          reflect.ValueOf(&echo.ErrNotFound).Elem(),
		"ErrNotFoundFileInput":                 reflect.ValueOf(&echo.ErrNotFoundFileInput).Elem(),
		"ErrNotImplemented":                    reflect.ValueOf(&echo.ErrNotImplemented).Elem(),
		"ErrPaymentRequired":                   reflect.ValueOf(&echo.ErrPaymentRequired).Elem(),
		"ErrPreconditionFailed":                reflect.ValueOf(&echo.ErrPreconditionFailed).Elem(),
		"ErrPreconditionRequired":              reflect.ValueOf(&echo.ErrPreconditionRequired).Elem(),
		"ErrProxyAuthRequired":                 reflect.ValueOf(&echo.ErrProxyAuthRequired).Elem(),
		"ErrRendererNotRegistered":             reflect.ValueOf(&echo.ErrRendererNotRegistered).Elem(),
		"ErrRequestEntityTooLarge":             reflect.ValueOf(&echo.ErrRequestEntityTooLarge).Elem(),
		"ErrRequestHeaderFieldsTooLarge":       reflect.ValueOf(&echo.ErrRequestHeaderFieldsTooLarge).Elem(),
		"ErrRequestTimeout":                    reflect.ValueOf(&echo.ErrRequestTimeout).Elem(),
		"ErrRequestURITooLong":                 reflect.ValueOf(&echo.ErrRequestURITooLong).Elem(),
		"ErrRequestedRangeNotSatisfiable":      reflect.ValueOf(&echo.ErrRequestedRangeNotSatisfiable).Elem(),
		"ErrReturn":                            reflect.ValueOf(&echo.ErrReturn).Elem(),
		"ErrSliceIndexTooLarge":                reflect.ValueOf(&echo.ErrSliceIndexTooLarge).Elem(),
		"ErrStatusRequestEntityTooLarge":       reflect.ValueOf(&echo.ErrStatusRequestEntityTooLarge).Elem(),
		"ErrTooEarly":                          reflect.ValueOf(&echo.ErrTooEarly).Elem(),
		"ErrTooManyRequests":                   reflect.ValueOf(&echo.ErrTooManyRequests).Elem(),
		"ErrUnauthorized":                      reflect.ValueOf(&echo.ErrUnauthorized).Elem(),
		"ErrUnavailableForLegalReasons":        reflect.ValueOf(&echo.ErrUnavailableForLegalReasons).Elem(),
		"ErrUnprocessableEntity":               reflect.ValueOf(&echo.ErrUnprocessableEntity).Elem(),
		"ErrUnsupportedMediaType":              reflect.ValueOf(&echo.ErrUnsupportedMediaType).Elem(),
		"ErrUpgradeRequired":                   reflect.ValueOf(&echo.ErrUpgradeRequired).Elem(),
		"ErrorHandler":                         reflect.ValueOf(&echo.ErrorHandler).Elem(),
		"EventNames":                           reflect.ValueOf(echo.EventNames),
		"ExcludeFieldName":                     reflect.ValueOf(echo.ExcludeFieldName),
		"FilePathSeparator":                    reflect.ValueOf(echo.FilePathSeparator),
		"Fire":                                 reflect.ValueOf(echo.Fire),
		"FireByName":                           reflect.ValueOf(echo.FireByName),
		"FireByNameWithMap":                    reflect.ValueOf(echo.FireByNameWithMap),
		"FlatStructToForm":                     reflect.ValueOf(echo.FlatStructToForm),
		"Float32":                              reflect.ValueOf(echo.Float32),
		"Float64":                              reflect.ValueOf(echo.Float64),
		"FormNames":                            reflect.ValueOf(echo.FormNames),
		"FormStringer":                         reflect.ValueOf(echo.FormStringer),
		"FormToMap":                            reflect.ValueOf(echo.FormToMap),
		"FormToMapWithDecoder":                 reflect.ValueOf(echo.FormToMapWithDecoder),
		"FormToStruct":                         reflect.ValueOf(echo.FormToStruct),
		"FormToStructWithDecoder":              reflect.ValueOf(echo.FormToStructWithDecoder),
		"FormatFieldValue":                     reflect.ValueOf(echo.FormatFieldValue),
		"FromStdContext":                       reflect.ValueOf(echo.FromStdContext),
		"GET":                                  reflect.ValueOf(constant.MakeFromLiteral("\"GET\"", token.STRING, 0)),
		"Get":                                  reflect.ValueOf(echo.Get),
		"GetNextURL":                           reflect.ValueOf(echo.GetNextURL),
		"GetOk":                                reflect.ValueOf(echo.GetOk),
		"GetOrSet":                             reflect.ValueOf(echo.GetOrSet),
		"GetOtherURL":                          reflect.ValueOf(echo.GetOtherURL),
		"GetStore":                             reflect.ValueOf(echo.GetStore),
		"GetStoreByKeys":                       reflect.ValueOf(echo.GetStoreByKeys),
		"GetValidated":                         reflect.ValueOf(echo.GetValidated),
		"HEAD":                                 reflect.ValueOf(constant.MakeFromLiteral("\"HEAD\"", token.STRING, 0)),
		"HStart":                               reflect.ValueOf(&echo.HStart).Elem(),
		"HTML":                                 reflect.ValueOf(echo.HTML),
		"HTMLAttr":                             reflect.ValueOf(echo.HTMLAttr),
		"HandlerName":                          reflect.ValueOf(echo.HandlerName),
		"HandlerPath":                          reflect.ValueOf(echo.HandlerPath),
		"HandlerTmpl":                          reflect.ValueOf(echo.HandlerTmpl),
		"Has":                                  reflect.ValueOf(echo.Has),
		"HasEvent":                             reflect.ValueOf(echo.HasEvent),
		"HeaderAccept":                         reflect.ValueOf(constant.MakeFromLiteral("\"Accept\"", token.STRING, 0)),
		"HeaderAcceptEncoding":                 reflect.ValueOf(constant.MakeFromLiteral("\"Accept-Encoding\"", token.STRING, 0)),
		"HeaderAccessControlAllowCredentials":  reflect.ValueOf(constant.MakeFromLiteral("\"Access-Control-Allow-Credentials\"", token.STRING, 0)),
		"HeaderAccessControlAllowHeaders":      reflect.ValueOf(constant.MakeFromLiteral("\"Access-Control-Allow-Headers\"", token.STRING, 0)),
		"HeaderAccessControlAllowMethods":      reflect.ValueOf(constant.MakeFromLiteral("\"Access-Control-Allow-Methods\"", token.STRING, 0)),
		"HeaderAccessControlAllowOrigin":       reflect.ValueOf(constant.MakeFromLiteral("\"Access-Control-Allow-Origin\"", token.STRING, 0)),
		"HeaderAccessControlExposeHeaders":     reflect.ValueOf(constant.MakeFromLiteral("\"Access-Control-Expose-Headers\"", token.STRING, 0)),
		"HeaderAccessControlMaxAge":            reflect.ValueOf(constant.MakeFromLiteral("\"Access-Control-Max-Age\"", token.STRING, 0)),
		"HeaderAccessControlRequestHeaders":    reflect.ValueOf(constant.MakeFromLiteral("\"Access-Control-Request-Headers\"", token.STRING, 0)),
		"HeaderAccessControlRequestMethod":     reflect.ValueOf(constant.MakeFromLiteral("\"Access-Control-Request-Method\"", token.STRING, 0)),
		"HeaderAllow":                          reflect.ValueOf(constant.MakeFromLiteral("\"Allow\"", token.STRING, 0)),
		"HeaderAuthorization":                  reflect.ValueOf(constant.MakeFromLiteral("\"Authorization\"", token.STRING, 0)),
		"HeaderCacheControl":                   reflect.ValueOf(constant.MakeFromLiteral("\"Cache-Control\"", token.STRING, 0)),
		"HeaderConnection":                     reflect.ValueOf(constant.MakeFromLiteral("\"Connection\"", token.STRING, 0)),
		"HeaderContentDisposition":             reflect.ValueOf(constant.MakeFromLiteral("\"Content-Disposition\"", token.STRING, 0)),
		"HeaderContentEncoding":                reflect.ValueOf(constant.MakeFromLiteral("\"Content-Encoding\"", token.STRING, 0)),
		"HeaderContentLength":                  reflect.ValueOf(constant.MakeFromLiteral("\"Content-Length\"", token.STRING, 0)),
		"HeaderContentSecurityPolicy":          reflect.ValueOf(constant.MakeFromLiteral("\"Content-Security-Policy\"", token.STRING, 0)),
		"HeaderContentType":                    reflect.ValueOf(constant.MakeFromLiteral("\"Content-Type\"", token.STRING, 0)),
		"HeaderCookie":                         reflect.ValueOf(constant.MakeFromLiteral("\"Cookie\"", token.STRING, 0)),
		"HeaderExpires":                        reflect.ValueOf(constant.MakeFromLiteral("\"Expires\"", token.STRING, 0)),
		"HeaderIfModifiedSince":                reflect.ValueOf(constant.MakeFromLiteral("\"If-Modified-Since\"", token.STRING, 0)),
		"HeaderLastModified":                   reflect.ValueOf(constant.MakeFromLiteral("\"Last-Modified\"", token.STRING, 0)),
		"HeaderLocation":                       reflect.ValueOf(constant.MakeFromLiteral("\"Location\"", token.STRING, 0)),
		"HeaderOrigin":                         reflect.ValueOf(constant.MakeFromLiteral("\"Origin\"", token.STRING, 0)),
		"HeaderServer":                         reflect.ValueOf(constant.MakeFromLiteral("\"Server\"", token.STRING, 0)),
		"HeaderSetCookie":                      reflect.ValueOf(constant.MakeFromLiteral("\"Set-Cookie\"", token.STRING, 0)),
		"HeaderStrictTransportSecurity":        reflect.ValueOf(constant.MakeFromLiteral("\"Strict-Transport-Security\"", token.STRING, 0)),
		"HeaderTransferEncoding":               reflect.ValueOf(constant.MakeFromLiteral("\"Transfer-Encoding\"", token.STRING, 0)),
		"HeaderUpgrade":                        reflect.ValueOf(constant.MakeFromLiteral("\"Upgrade\"", token.STRING, 0)),
		"HeaderVary":                           reflect.ValueOf(constant.MakeFromLiteral("\"Vary\"", token.STRING, 0)),
		"HeaderWWWAuthenticate":                reflect.ValueOf(constant.MakeFromLiteral("\"WWW-Authenticate\"", token.STRING, 0)),
		"HeaderXCSRFToken":                     reflect.ValueOf(constant.MakeFromLiteral("\"X-CSRF-Token\"", token.STRING, 0)),
		"HeaderXContentTypeOptions":            reflect.ValueOf(constant.MakeFromLiteral("\"X-Content-Type-Options\"", token.STRING, 0)),
		"HeaderXForwardedFor":                  reflect.ValueOf(constant.MakeFromLiteral("\"X-Forwarded-For\"", token.STRING, 0)),
		"HeaderXForwardedPort":                 reflect.ValueOf(constant.MakeFromLiteral("\"X-Forwarded-Port\"", token.STRING, 0)),
		"HeaderXForwardedProto":                reflect.ValueOf(constant.MakeFromLiteral("\"X-Forwarded-Proto\"", token.STRING, 0)),
		"HeaderXFrameOptions":                  reflect.ValueOf(constant.MakeFromLiteral("\"X-Frame-Options\"", token.STRING, 0)),
		"HeaderXHTTPMethodOverride":            reflect.ValueOf(constant.MakeFromLiteral("\"X-HTTP-Method-Override\"", token.STRING, 0)),
		"HeaderXRealIP":                        reflect.ValueOf(constant.MakeFromLiteral("\"X-Real-IP\"", token.STRING, 0)),
		"HeaderXRequestID":                     reflect.ValueOf(constant.MakeFromLiteral("\"X-Request-ID\"", token.STRING, 0)),
		"HeaderXRequestedWith":                 reflect.ValueOf(constant.MakeFromLiteral("\"X-Requested-With\"", token.STRING, 0)),
		"HeaderXXSSProtection":                 reflect.ValueOf(constant.MakeFromLiteral("\"X-XSS-Protection\"", token.STRING, 0)),
		"Ignored":                              reflect.ValueOf(&echo.Ignored).Elem(),
		"InErrorCode":                          reflect.ValueOf(echo.InErrorCode),
		"InSliceFold":                          reflect.ValueOf(echo.InSliceFold),
		"IncludeFieldName":                     reflect.ValueOf(echo.IncludeFieldName),
		"Incr":                                 reflect.ValueOf(echo.Incr),
		"Int":                                  reflect.ValueOf(echo.Int),
		"Int16":                                reflect.ValueOf(echo.Int16),
		"Int32":                                reflect.ValueOf(echo.Int32),
		"Int64":                                reflect.ValueOf(echo.Int64),
		"Int8":                                 reflect.ValueOf(echo.Int8),
		"InterfacesToStrings":                  reflect.ValueOf(echo.InterfacesToStrings),
		"IsContext":                            reflect.ValueOf(echo.IsContext),
		"IsErrorCode":                          reflect.ValueOf(echo.IsErrorCode),
		"JS":                                   reflect.ValueOf(echo.JS),
		"JoinValues":                           reflect.ValueOf(&echo.JoinValues).Elem(),
		"KVOptFn":                              reflect.ValueOf(echo.KVOptFn),
		"KVOptH":                               reflect.ValueOf(echo.KVOptH),
		"KVOptHKV":                             reflect.ValueOf(echo.KVOptHKV),
		"KVOptK":                               reflect.ValueOf(echo.KVOptK),
		"KVOptV":                               reflect.ValueOf(echo.KVOptV),
		"KVOptX":                               reflect.ValueOf(echo.KVOptX),
		"LogIf":                                reflect.ValueOf(echo.LogIf),
		"LowerCaseFirstLetter":                 reflect.ValueOf(&echo.LowerCaseFirstLetter).Elem(),
		"MIMEApplicationForm":                  reflect.ValueOf(constant.MakeFromLiteral("\"application/x-www-form-urlencoded\"", token.STRING, 0)),
		"MIMEApplicationJSON":                  reflect.ValueOf(constant.MakeFromLiteral("\"application/json\"", token.STRING, 0)),
		"MIMEApplicationJSONCharsetUTF8":       reflect.ValueOf(constant.MakeFromLiteral("\"application/json; charset=utf-8\"", token.STRING, 0)),
		"MIMEApplicationJavaScript":            reflect.ValueOf(constant.MakeFromLiteral("\"application/javascript\"", token.STRING, 0)),
		"MIMEApplicationJavaScriptCharsetUTF8": reflect.ValueOf(constant.MakeFromLiteral("\"application/javascript; charset=utf-8\"", token.STRING, 0)),
		"MIMEApplicationMsgpack":               reflect.ValueOf(constant.MakeFromLiteral("\"application/msgpack\"", token.STRING, 0)),
		"MIMEApplicationProtobuf":              reflect.ValueOf(constant.MakeFromLiteral("\"application/protobuf\"", token.STRING, 0)),
		"MIMEApplicationXML":                   reflect.ValueOf(constant.MakeFromLiteral("\"application/xml\"", token.STRING, 0)),
		"MIMEApplicationXMLCharsetUTF8":        reflect.ValueOf(constant.MakeFromLiteral("\"application/xml; charset=utf-8\"", token.STRING, 0)),
		"MIMEEventStream":                      reflect.ValueOf(constant.MakeFromLiteral("\"text/event-stream\"", token.STRING, 0)),
		"MIMEMultipartForm":                    reflect.ValueOf(constant.MakeFromLiteral("\"multipart/form-data\"", token.STRING, 0)),
		"MIMEOctetStream":                      reflect.ValueOf(constant.MakeFromLiteral("\"application/octet-stream\"", token.STRING, 0)),
		"MIMETextCSS":                          reflect.ValueOf(constant.MakeFromLiteral("\"text/css\"", token.STRING, 0)),
		"MIMETextCSSCharsetUTF8":               reflect.ValueOf(constant.MakeFromLiteral("\"text/css; charset=utf-8\"", token.STRING, 0)),
		"MIMETextHTML":                         reflect.ValueOf(constant.MakeFromLiteral("\"text/html\"", token.STRING, 0)),
		"MIMETextHTMLCharsetUTF8":              reflect.ValueOf(constant.MakeFromLiteral("\"text/html; charset=utf-8\"", token.STRING, 0)),
		"MIMETextJavaScript":                   reflect.ValueOf(constant.MakeFromLiteral("\"text/javascript\"", token.STRING, 0)),
		"MIMETextJavaScriptCharsetUTF8":        reflect.ValueOf(constant.MakeFromLiteral("\"text/javascript; charset=utf-8\"", token.STRING, 0)),
		"MIMETextPlain":                        reflect.ValueOf(constant.MakeFromLiteral("\"text/plain\"", token.STRING, 0)),
		"MIMETextPlainCharsetUTF8":             reflect.ValueOf(constant.MakeFromLiteral("\"text/plain; charset=utf-8\"", token.STRING, 0)),
		"MakeArrayFieldNameFormatter":          reflect.ValueOf(echo.MakeArrayFieldNameFormatter),
		"MethodNotAllowedHandler":              reflect.ValueOf(&echo.MethodNotAllowedHandler).Elem(),
		"Methods":                              reflect.ValueOf(echo.Methods),
		"NamedStructMap":                       reflect.ValueOf(echo.NamedStructMap),
		"NamedStructMapWithDecoder":            reflect.ValueOf(echo.NamedStructMapWithDecoder),
		"New":                                  reflect.ValueOf(echo.New),
		"NewAccept":                            reflect.ValueOf(echo.NewAccept),
		"NewAccepts":                           reflect.ValueOf(echo.NewAccepts),
		"NewBaseRequestValidator":              reflect.ValueOf(echo.NewBaseRequestValidator),
		"NewBinder":                            reflect.ValueOf(echo.NewBinder),
		"NewContext":                           reflect.ValueOf(echo.NewContext),
		"NewCookie":                            reflect.ValueOf(echo.NewCookie),
		"NewCookier":                           reflect.ValueOf(echo.NewCookier),
		"NewData":                              reflect.ValueOf(echo.NewData),
		"NewError":                             reflect.ValueOf(echo.NewError),
		"NewErrorWith":                         reflect.ValueOf(echo.NewErrorWith),
		"NewEvent":                             reflect.ValueOf(echo.NewEvent),
		"NewHTTPError":                         reflect.ValueOf(echo.NewHTTPError),
		"NewHost":                              reflect.ValueOf(echo.NewHost),
		"NewKV":                                reflect.ValueOf(echo.NewKV),
		"NewKVData":                            reflect.ValueOf(echo.NewKVData),
		"NewLangCode":                          reflect.ValueOf(echo.NewLangCode),
		"NewMapx":                              reflect.ValueOf(echo.NewMapx),
		"NewPanicError":                        reflect.ValueOf(echo.NewPanicError),
		"NewRenderData":                        reflect.ValueOf(echo.NewRenderData),
		"NewRouter":                            reflect.ValueOf(echo.NewRouter),
		"NewSessionOptions":                    reflect.ValueOf(echo.NewSessionOptions),
		"NewTransaction":                       reflect.ValueOf(echo.NewTransaction),
		"NewValidateResult":                    reflect.ValueOf(echo.NewValidateResult),
		"NewValidation":                        reflect.ValueOf(echo.NewValidation),
		"NewWithContext":                       reflect.ValueOf(echo.NewWithContext),
		"NotFoundHandler":                      reflect.ValueOf(&echo.NotFoundHandler).Elem(),
		"OPTIONS":                              reflect.ValueOf(constant.MakeFromLiteral("\"OPTIONS\"", token.STRING, 0)),
		"Off":                                  reflect.ValueOf(echo.Off),
		"On":                                   reflect.ValueOf(echo.On),
		"OnCallback":                           reflect.ValueOf(echo.OnCallback),
		"OnStream":                             reflect.ValueOf(echo.OnStream),
		"PATCH":                                reflect.ValueOf(constant.MakeFromLiteral("\"PATCH\"", token.STRING, 0)),
		"POST":                                 reflect.ValueOf(constant.MakeFromLiteral("\"POST\"", token.STRING, 0)),
		"PUT":                                  reflect.ValueOf(constant.MakeFromLiteral("\"PUT\"", token.STRING, 0)),
		"PanicIf":                              reflect.ValueOf(echo.PanicIf),
		"ParseTemplateError":                   reflect.ValueOf(echo.ParseTemplateError),
		"ParseURIRegExp":                       reflect.ValueOf(echo.ParseURIRegExp),
		"Range":                                reflect.ValueOf(echo.Range),
		"RemoveListener":                       reflect.ValueOf(echo.RemoveListener),
		"ReturnToCurrentURL":                   reflect.ValueOf(echo.ReturnToCurrentURL),
		"SafeGetFieldByName":                   reflect.ValueOf(echo.SafeGetFieldByName),
		"SchemeHTTP":                           reflect.ValueOf(constant.MakeFromLiteral("\"http\"", token.STRING, 0)),
		"SchemeHTTPS":                          reflect.ValueOf(constant.MakeFromLiteral("\"https\"", token.STRING, 0)),
		"SearchEngineNoindex":                  reflect.ValueOf(echo.SearchEngineNoindex),
		"Set":                                  reflect.ValueOf(echo.Set),
		"SetAttachmentHeader":                  reflect.ValueOf(echo.SetAttachmentHeader),
		"SetFormValue":                         reflect.ValueOf(echo.SetFormValue),
		"SetFormValues":                        reflect.ValueOf(echo.SetFormValues),
		"SetReflectValue":                      reflect.ValueOf(echo.SetReflectValue),
		"SetWorkDir":                           reflect.ValueOf(echo.SetWorkDir),
		"SnippetLineNumbers":                   reflect.ValueOf(constant.MakeFromLiteral("13", token.INT, 0)),
		"Split":                                reflect.ValueOf(echo.Split),
		"SplitValues":                          reflect.ValueOf(&echo.SplitValues).Elem(),
		"StackSize":                            reflect.ValueOf(constant.MakeFromLiteral("4096", token.INT, 0)),
		"StoreStart":                           reflect.ValueOf(&echo.StoreStart).Elem(),
		"String":                               reflect.ValueOf(echo.String),
		"StringerMapStart":                     reflect.ValueOf(&echo.StringerMapStart).Elem(),
		"StructToForm":                         reflect.ValueOf(echo.StructToForm),
		"T":                                    reflect.ValueOf(echo.T),
		"TRACE":                                reflect.ValueOf(constant.MakeFromLiteral("\"TRACE\"", token.STRING, 0)),
		"Timestamp":                            reflect.ValueOf(echo.Timestamp),
		"TimestampStringer":                    reflect.ValueOf(&echo.TimestampStringer).Elem(),
		"TimestampToDate":                      reflect.ValueOf(&echo.TimestampToDate).Elem(),
		"ToStdContext":                         reflect.ValueOf(echo.ToStdContext),
		"TranslateStringer":                    reflect.ValueOf(echo.TranslateStringer),
		"Trim":                                 reflect.ValueOf(echo.Trim),
		"URLDecode":                            reflect.ValueOf(echo.URLDecode),
		"URLEncode":                            reflect.ValueOf(echo.URLEncode),
		"Uint":                                 reflect.ValueOf(echo.Uint),
		"Uint16":                               reflect.ValueOf(echo.Uint16),
		"Uint32":                               reflect.ValueOf(echo.Uint32),
		"Uint64":                               reflect.ValueOf(echo.Uint64),
		"Uint8":                                reflect.ValueOf(echo.Uint8),
		"Validate":                             reflect.ValueOf(echo.Validate),
		"ValidateStruct":                       reflect.ValueOf(echo.ValidateStruct),
		"Wd":                                   reflect.ValueOf(echo.Wd),
		"WhitespaceStringer":                   reflect.ValueOf(&echo.WhitespaceStringer).Elem(),
		"WithNextURL":                          reflect.ValueOf(echo.WithNextURL),
		"WrapHandler":                          reflect.ValueOf(echo.WrapHandler),
		"WrapMiddleware":                       reflect.ValueOf(echo.WrapMiddleware),
		"WrapMiddlewareFromHandler":            reflect.ValueOf(echo.WrapMiddlewareFromHandler),
		"WrapMiddlewareFromStdHandleFunc":      reflect.ValueOf(echo.WrapMiddlewareFromStdHandleFunc),
		"WrapMiddlewareFromStdHandleFuncd":     reflect.ValueOf(echo.WrapMiddlewareFromStdHandleFuncd),
		"WrapMiddlewareFromStdHandler":         reflect.ValueOf(echo.WrapMiddlewareFromStdHandler),

		// type definitions
		"Accept":                    reflect.ValueOf((*echo.Accept)(nil)),
		"AcceptQuality":             reflect.ValueOf((*echo.AcceptQuality)(nil)),
		"Accepts":                   reflect.ValueOf((*echo.Accepts)(nil)),
		"AfterValidate":             reflect.ValueOf((*echo.AfterValidate)(nil)),
		"AsMiddleware":              reflect.ValueOf((*echo.AsMiddleware)(nil)),
		"BaseRequestValidator":      reflect.ValueOf((*echo.BaseRequestValidator)(nil)),
		"BaseTransaction":           reflect.ValueOf((*echo.BaseTransaction)(nil)),
		"BeforeBind":                reflect.ValueOf((*echo.BeforeBind)(nil)),
		"BeforeValidate":            reflect.ValueOf((*echo.BeforeValidate)(nil)),
		"Binder":                    reflect.ValueOf((*echo.Binder)(nil)),
		"BinderFormTopNamer":        reflect.ValueOf((*echo.BinderFormTopNamer)(nil)),
		"BinderKeyNormalizer":       reflect.ValueOf((*echo.BinderKeyNormalizer)(nil)),
		"BinderValueCustomDecoder":  reflect.ValueOf((*echo.BinderValueCustomDecoder)(nil)),
		"BinderValueCustomDecoders": reflect.ValueOf((*echo.BinderValueCustomDecoders)(nil)),
		"BinderValueCustomEncoder":  reflect.ValueOf((*echo.BinderValueCustomEncoder)(nil)),
		"BinderValueCustomEncoders": reflect.ValueOf((*echo.BinderValueCustomEncoders)(nil)),
		"BinderValueDecoder":        reflect.ValueOf((*echo.BinderValueDecoder)(nil)),
		"BinderValueEncoder":        reflect.ValueOf((*echo.BinderValueEncoder)(nil)),
		"Closer":                    reflect.ValueOf((*echo.Closer)(nil)),
		"Context":                   reflect.ValueOf((*echo.Context)(nil)),
		"ContextRegister":           reflect.ValueOf((*echo.ContextRegister)(nil)),
		"ContextReseter":            reflect.ValueOf((*echo.ContextReseter)(nil)),
		"CookieOptions":             reflect.ValueOf((*echo.CookieOptions)(nil)),
		"Cookier":                   reflect.ValueOf((*echo.Cookier)(nil)),
		"Data":                      reflect.ValueOf((*echo.Data)(nil)),
		"DataWrapper":               reflect.ValueOf((*echo.DataWrapper)(nil)),
		"DebugSession":              reflect.ValueOf((*echo.DebugSession)(nil)),
		"DebugTransaction":          reflect.ValueOf((*echo.DebugTransaction)(nil)),
		"Echo":                      reflect.ValueOf((*echo.Echo)(nil)),
		"ErrUnwrap":                 reflect.ValueOf((*echo.ErrUnwrap)(nil)),
		"Error":                     reflect.ValueOf((*echo.Error)(nil)),
		"Event":                     reflect.ValueOf((*echo.Event)(nil)),
		"FieldNameFormatter":        reflect.ValueOf((*echo.FieldNameFormatter)(nil)),
		"FiltersGetter":             reflect.ValueOf((*echo.FiltersGetter)(nil)),
		"FormDataFilter":            reflect.ValueOf((*echo.FormDataFilter)(nil)),
		"FormNameFormatterGetter":   reflect.ValueOf((*echo.FormNameFormatterGetter)(nil)),
		"FormatRender":              reflect.ValueOf((*echo.FormatRender)(nil)),
		"FromConversion":            reflect.ValueOf((*echo.FromConversion)(nil)),
		"Group":                     reflect.ValueOf((*echo.Group)(nil)),
		"H":                         reflect.ValueOf((*echo.H)(nil)),
		"HTTPError":                 reflect.ValueOf((*echo.HTTPError)(nil)),
		"HTTPErrorHandler":          reflect.ValueOf((*echo.HTTPErrorHandler)(nil)),
		"Handler":                   reflect.ValueOf((*echo.Handler)(nil)),
		"HandlerFunc":               reflect.ValueOf((*echo.HandlerFunc)(nil)),
		"HandlerFuncs":              reflect.ValueOf((*echo.HandlerFuncs)(nil)),
		"Host":                      reflect.ValueOf((*echo.Host)(nil)),
		"Hoster":                    reflect.ValueOf((*echo.Hoster)(nil)),
		"ICore":                     reflect.ValueOf((*echo.ICore)(nil)),
		"IRouter":                   reflect.ValueOf((*echo.IRouter)(nil)),
		"IsHiddenContext":           reflect.ValueOf((*echo.IsHiddenContext)(nil)),
		"IsValidContext":            reflect.ValueOf((*echo.IsValidContext)(nil)),
		"JSONModifer":               reflect.ValueOf((*echo.JSONModifer)(nil)),
		"KV":                        reflect.ValueOf((*echo.KV)(nil)),
		"KVData":                    reflect.ValueOf((*echo.KVData)(nil)),
		"KVList":                    reflect.ValueOf((*echo.KVList)(nil)),
		"KVOption":                  reflect.ValueOf((*echo.KVOption)(nil)),
		"LangCode":                  reflect.ValueOf((*echo.LangCode)(nil)),
		"Mapx":                      reflect.ValueOf((*echo.Mapx)(nil)),
		"Meta":                      reflect.ValueOf((*echo.Meta)(nil)),
		"MetaHandler":               reflect.ValueOf((*echo.MetaHandler)(nil)),
		"MetaValidator":             reflect.ValueOf((*echo.MetaValidator)(nil)),
		"MethodGetter":              reflect.ValueOf((*echo.MethodGetter)(nil)),
		"Middleware":                reflect.ValueOf((*echo.Middleware)(nil)),
		"MiddlewareFunc":            reflect.ValueOf((*echo.MiddlewareFunc)(nil)),
		"MiddlewareFuncd":           reflect.ValueOf((*echo.MiddlewareFuncd)(nil)),
		"MiddlewareRegister":        reflect.ValueOf((*echo.MiddlewareRegister)(nil)),
		"Name":                      reflect.ValueOf((*echo.Name)(nil)),
		"NopSession":                reflect.ValueOf((*echo.NopSession)(nil)),
		"NopTranslate":              reflect.ValueOf((*echo.NopTranslate)(nil)),
		"NopValidation":             reflect.ValueOf((*echo.NopValidation)(nil)),
		"PanicError":                reflect.ValueOf((*echo.PanicError)(nil)),
		"Prefixer":                  reflect.ValueOf((*echo.Prefixer)(nil)),
		"RawData":                   reflect.ValueOf((*echo.RawData)(nil)),
		"RenderContext":             reflect.ValueOf((*echo.RenderContext)(nil)),
		"RenderData":                reflect.ValueOf((*echo.RenderData)(nil)),
		"RenderDataContext":         reflect.ValueOf((*echo.RenderDataContext)(nil)),
		"Renderer":                  reflect.ValueOf((*echo.Renderer)(nil)),
		"RendererRegister":          reflect.ValueOf((*echo.RendererRegister)(nil)),
		"RequestValidator":          reflect.ValueOf((*echo.RequestValidator)(nil)),
		"Rewriter":                  reflect.ValueOf((*echo.Rewriter)(nil)),
		"Route":                     reflect.ValueOf((*echo.Route)(nil)),
		"RouteRegister":             reflect.ValueOf((*echo.RouteRegister)(nil)),
		"Router":                    reflect.ValueOf((*echo.Router)(nil)),
		"Routes":                    reflect.ValueOf((*echo.Routes)(nil)),
		"SessionOptions":            reflect.ValueOf((*echo.SessionOptions)(nil)),
		"Sessioner":                 reflect.ValueOf((*echo.Sessioner)(nil)),
		"Skipper":                   reflect.ValueOf((*echo.Skipper)(nil)),
		"Snippet":                   reflect.ValueOf((*echo.Snippet)(nil)),
		"SnippetGroup":              reflect.ValueOf((*echo.SnippetGroup)(nil)),
		"Store":                     reflect.ValueOf((*echo.Store)(nil)),
		"Template":                  reflect.ValueOf((*echo.Template)(nil)),
		"ToConversion":              reflect.ValueOf((*echo.ToConversion)(nil)),
		"Trace":                     reflect.ValueOf((*echo.Trace)(nil)),
		"Transaction":               reflect.ValueOf((*echo.Transaction)(nil)),
		"Translator":                reflect.ValueOf((*echo.Translator)(nil)),
		"TypeHost":                  reflect.ValueOf((*echo.TypeHost)(nil)),
		"URLBuilder":                reflect.ValueOf((*echo.URLBuilder)(nil)),
		"UnwrapTransaction":         reflect.ValueOf((*echo.UnwrapTransaction)(nil)),
		"ValidateResult":            reflect.ValueOf((*echo.ValidateResult)(nil)),
		"Validation":                reflect.ValueOf((*echo.Validation)(nil)),
		"Validator":                 reflect.ValueOf((*echo.Validator)(nil)),
		"ValidatorResult":           reflect.ValueOf((*echo.ValidatorResult)(nil)),
		"ValueDecodersGetter":       reflect.ValueOf((*echo.ValueDecodersGetter)(nil)),
		"ValueEncodersGetter":       reflect.ValueOf((*echo.ValueEncodersGetter)(nil)),
		"ValueStringersGetter":      reflect.ValueOf((*echo.ValueStringersGetter)(nil)),
		"XContext":                  reflect.ValueOf((*echo.XContext)(nil)),
		"XMLModifer":                reflect.ValueOf((*echo.XMLModifer)(nil)),

		// interface wrapper definitions
		"_AfterValidate":           reflect.ValueOf((*_github_com_webx_top_echo_AfterValidate)(nil)),
		"_BeforeBind":              reflect.ValueOf((*_github_com_webx_top_echo_BeforeBind)(nil)),
		"_BeforeValidate":          reflect.ValueOf((*_github_com_webx_top_echo_BeforeValidate)(nil)),
		"_Binder":                  reflect.ValueOf((*_github_com_webx_top_echo_Binder)(nil)),
		"_BinderFormTopNamer":      reflect.ValueOf((*_github_com_webx_top_echo_BinderFormTopNamer)(nil)),
		"_BinderKeyNormalizer":     reflect.ValueOf((*_github_com_webx_top_echo_BinderKeyNormalizer)(nil)),
		"_Closer":                  reflect.ValueOf((*_github_com_webx_top_echo_Closer)(nil)),
		"_Context":                 reflect.ValueOf((*_github_com_webx_top_echo_Context)(nil)),
		"_ContextRegister":         reflect.ValueOf((*_github_com_webx_top_echo_ContextRegister)(nil)),
		"_ContextReseter":          reflect.ValueOf((*_github_com_webx_top_echo_ContextReseter)(nil)),
		"_Cookier":                 reflect.ValueOf((*_github_com_webx_top_echo_Cookier)(nil)),
		"_Data":                    reflect.ValueOf((*_github_com_webx_top_echo_Data)(nil)),
		"_ErrUnwrap":               reflect.ValueOf((*_github_com_webx_top_echo_ErrUnwrap)(nil)),
		"_FiltersGetter":           reflect.ValueOf((*_github_com_webx_top_echo_FiltersGetter)(nil)),
		"_FormNameFormatterGetter": reflect.ValueOf((*_github_com_webx_top_echo_FormNameFormatterGetter)(nil)),
		"_FromConversion":          reflect.ValueOf((*_github_com_webx_top_echo_FromConversion)(nil)),
		"_Handler":                 reflect.ValueOf((*_github_com_webx_top_echo_Handler)(nil)),
		"_Hoster":                  reflect.ValueOf((*_github_com_webx_top_echo_Hoster)(nil)),
		"_ICore":                   reflect.ValueOf((*_github_com_webx_top_echo_ICore)(nil)),
		"_IRouter":                 reflect.ValueOf((*_github_com_webx_top_echo_IRouter)(nil)),
		"_IsHiddenContext":         reflect.ValueOf((*_github_com_webx_top_echo_IsHiddenContext)(nil)),
		"_IsValidContext":          reflect.ValueOf((*_github_com_webx_top_echo_IsValidContext)(nil)),
		"_JSONModifer":             reflect.ValueOf((*_github_com_webx_top_echo_JSONModifer)(nil)),
		"_LangCode":                reflect.ValueOf((*_github_com_webx_top_echo_LangCode)(nil)),
		"_Meta":                    reflect.ValueOf((*_github_com_webx_top_echo_Meta)(nil)),
		"_MetaValidator":           reflect.ValueOf((*_github_com_webx_top_echo_MetaValidator)(nil)),
		"_MethodGetter":            reflect.ValueOf((*_github_com_webx_top_echo_MethodGetter)(nil)),
		"_Middleware":              reflect.ValueOf((*_github_com_webx_top_echo_Middleware)(nil)),
		"_MiddlewareRegister":      reflect.ValueOf((*_github_com_webx_top_echo_MiddlewareRegister)(nil)),
		"_Name":                    reflect.ValueOf((*_github_com_webx_top_echo_Name)(nil)),
		"_Prefixer":                reflect.ValueOf((*_github_com_webx_top_echo_Prefixer)(nil)),
		"_RenderContext":           reflect.ValueOf((*_github_com_webx_top_echo_RenderContext)(nil)),
		"_RenderDataContext":       reflect.ValueOf((*_github_com_webx_top_echo_RenderDataContext)(nil)),
		"_Renderer":                reflect.ValueOf((*_github_com_webx_top_echo_Renderer)(nil)),
		"_RendererRegister":        reflect.ValueOf((*_github_com_webx_top_echo_RendererRegister)(nil)),
		"_Rewriter":                reflect.ValueOf((*_github_com_webx_top_echo_Rewriter)(nil)),
		"_RouteRegister":           reflect.ValueOf((*_github_com_webx_top_echo_RouteRegister)(nil)),
		"_Sessioner":               reflect.ValueOf((*_github_com_webx_top_echo_Sessioner)(nil)),
		"_Template":                reflect.ValueOf((*_github_com_webx_top_echo_Template)(nil)),
		"_ToConversion":            reflect.ValueOf((*_github_com_webx_top_echo_ToConversion)(nil)),
		"_Transaction":             reflect.ValueOf((*_github_com_webx_top_echo_Transaction)(nil)),
		"_Translator":              reflect.ValueOf((*_github_com_webx_top_echo_Translator)(nil)),
		"_URLBuilder":              reflect.ValueOf((*_github_com_webx_top_echo_URLBuilder)(nil)),
		"_UnwrapTransaction":       reflect.ValueOf((*_github_com_webx_top_echo_UnwrapTransaction)(nil)),
		"_ValidateResult":          reflect.ValueOf((*_github_com_webx_top_echo_ValidateResult)(nil)),
		"_Validator":               reflect.ValueOf((*_github_com_webx_top_echo_Validator)(nil)),
		"_ValueDecodersGetter":     reflect.ValueOf((*_github_com_webx_top_echo_ValueDecodersGetter)(nil)),
		"_ValueEncodersGetter":     reflect.ValueOf((*_github_com_webx_top_echo_ValueEncodersGetter)(nil)),
		"_ValueStringersGetter":    reflect.ValueOf((*_github_com_webx_top_echo_ValueStringersGetter)(nil)),
		"_XMLModifer":              reflect.ValueOf((*_github_com_webx_top_echo_XMLModifer)(nil)),
	}
}

// _github_com_webx_top_echo_AfterValidate is an interface wrapper for AfterValidate type
type _github_com_webx_top_echo_AfterValidate struct {
	IValue         interface{}
	WAfterValidate func(a0 echo.Context) error
}

func (W _github_com_webx_top_echo_AfterValidate) AfterValidate(a0 echo.Context) error {
	return W.WAfterValidate(a0)
}

// _github_com_webx_top_echo_BeforeBind is an interface wrapper for BeforeBind type
type _github_com_webx_top_echo_BeforeBind struct {
	IValue      interface{}
	WBeforeBind func(a0 echo.Context) error
}

func (W _github_com_webx_top_echo_BeforeBind) BeforeBind(a0 echo.Context) error {
	return W.WBeforeBind(a0)
}

// _github_com_webx_top_echo_BeforeValidate is an interface wrapper for BeforeValidate type
type _github_com_webx_top_echo_BeforeValidate struct {
	IValue          interface{}
	WBeforeValidate func(a0 echo.Context) error
}

func (W _github_com_webx_top_echo_BeforeValidate) BeforeValidate(a0 echo.Context) error {
	return W.WBeforeValidate(a0)
}

// _github_com_webx_top_echo_Binder is an interface wrapper for Binder type
type _github_com_webx_top_echo_Binder struct {
	IValue                          interface{}
	WBind                           func(a0 interface{}, a1 echo.Context, a2 ...echo.FormDataFilter) error
	WBindAndValidate                func(a0 interface{}, a1 echo.Context, a2 ...echo.FormDataFilter) error
	WBindAndValidateWithDecoder     func(a0 interface{}, a1 echo.Context, a2 echo.BinderValueCustomDecoders, a3 ...echo.FormDataFilter) error
	WBindWithDecoder                func(a0 interface{}, a1 echo.Context, a2 echo.BinderValueCustomDecoders, a3 ...echo.FormDataFilter) error
	WMustBind                       func(a0 interface{}, a1 echo.Context, a2 ...echo.FormDataFilter) error
	WMustBindAndValidate            func(a0 interface{}, a1 echo.Context, a2 ...echo.FormDataFilter) error
	WMustBindAndValidateWithDecoder func(a0 interface{}, a1 echo.Context, a2 echo.BinderValueCustomDecoders, a3 ...echo.FormDataFilter) error
	WMustBindWithDecoder            func(a0 interface{}, a1 echo.Context, a2 echo.BinderValueCustomDecoders, a3 ...echo.FormDataFilter) error
}

func (W _github_com_webx_top_echo_Binder) Bind(a0 interface{}, a1 echo.Context, a2 ...echo.FormDataFilter) error {
	return W.WBind(a0, a1, a2...)
}
func (W _github_com_webx_top_echo_Binder) BindAndValidate(a0 interface{}, a1 echo.Context, a2 ...echo.FormDataFilter) error {
	return W.WBindAndValidate(a0, a1, a2...)
}
func (W _github_com_webx_top_echo_Binder) BindAndValidateWithDecoder(a0 interface{}, a1 echo.Context, a2 echo.BinderValueCustomDecoders, a3 ...echo.FormDataFilter) error {
	return W.WBindAndValidateWithDecoder(a0, a1, a2, a3...)
}
func (W _github_com_webx_top_echo_Binder) BindWithDecoder(a0 interface{}, a1 echo.Context, a2 echo.BinderValueCustomDecoders, a3 ...echo.FormDataFilter) error {
	return W.WBindWithDecoder(a0, a1, a2, a3...)
}
func (W _github_com_webx_top_echo_Binder) MustBind(a0 interface{}, a1 echo.Context, a2 ...echo.FormDataFilter) error {
	return W.WMustBind(a0, a1, a2...)
}
func (W _github_com_webx_top_echo_Binder) MustBindAndValidate(a0 interface{}, a1 echo.Context, a2 ...echo.FormDataFilter) error {
	return W.WMustBindAndValidate(a0, a1, a2...)
}
func (W _github_com_webx_top_echo_Binder) MustBindAndValidateWithDecoder(a0 interface{}, a1 echo.Context, a2 echo.BinderValueCustomDecoders, a3 ...echo.FormDataFilter) error {
	return W.WMustBindAndValidateWithDecoder(a0, a1, a2, a3...)
}
func (W _github_com_webx_top_echo_Binder) MustBindWithDecoder(a0 interface{}, a1 echo.Context, a2 echo.BinderValueCustomDecoders, a3 ...echo.FormDataFilter) error {
	return W.WMustBindWithDecoder(a0, a1, a2, a3...)
}

// _github_com_webx_top_echo_BinderFormTopNamer is an interface wrapper for BinderFormTopNamer type
type _github_com_webx_top_echo_BinderFormTopNamer struct {
	IValue             interface{}
	WBinderFormTopName func() string
}

func (W _github_com_webx_top_echo_BinderFormTopNamer) BinderFormTopName() string {
	return W.WBinderFormTopName()
}

// _github_com_webx_top_echo_BinderKeyNormalizer is an interface wrapper for BinderKeyNormalizer type
type _github_com_webx_top_echo_BinderKeyNormalizer struct {
	IValue               interface{}
	WBinderKeyNormalizer func(a0 string) string
}

func (W _github_com_webx_top_echo_BinderKeyNormalizer) BinderKeyNormalizer(a0 string) string {
	return W.WBinderKeyNormalizer(a0)
}

// _github_com_webx_top_echo_Closer is an interface wrapper for Closer type
type _github_com_webx_top_echo_Closer struct {
	IValue interface{}
	WClose func() error
}

func (W _github_com_webx_top_echo_Closer) Close() error {
	return W.WClose()
}

// _github_com_webx_top_echo_Context is an interface wrapper for Context type
type _github_com_webx_top_echo_Context struct {
	IValue                          interface{}
	WAccept                         func() *echo.Accepts
	WAddEventListener               func(handler events.Listener, events ...string)
	WAddPreResponseHook             func(a0 func() error) echo.Context
	WAtop                           func(a0 string) param.String
	WAttachment                     func(a0 io.Reader, a1 string, a2 time.Time, a3 ...bool) error
	WBegin                          func() error
	WBind                           func(a0 interface{}, a1 ...echo.FormDataFilter) error
	WBindAndValidate                func(a0 interface{}, a1 ...echo.FormDataFilter) error
	WBindAndValidateWithDecoder     func(a0 interface{}, a1 echo.BinderValueCustomDecoders, a2 ...echo.FormDataFilter) error
	WBindWithDecoder                func(a0 interface{}, a1 echo.BinderValueCustomDecoders, a2 ...echo.FormDataFilter) error
	WBlob                           func(a0 []byte, a1 ...int) error
	WCacheableAttachment            func(a0 io.Reader, a1 string, a2 time.Time, a3 time.Duration, a4 ...bool) error
	WCacheableFile                  func(a0 string, a1 time.Duration, a2 ...http.FileSystem) error
	WCode                           func() int
	WCommit                         func() error
	WCookie                         func() echo.Cookier
	WCookieOptions                  func() *echo.CookieOptions
	WData                           func() echo.Data
	WDeadline                       func() (deadline time.Time, ok bool)
	WDecr                           func(key string, n interface{}, defaults ...interface{}) int64
	WDefaultExtension               func() string
	WDelete                         func(a0 ...string)
	WDispatch                       func(route string) echo.Handler
	WDomain                         func() string
	WDone                           func() <-chan struct{}
	WE                              func(format string, args ...interface{}) error
	WEcho                           func() *echo.Echo
	WEnd                            func(succeed bool) error
	WErr                            func() error
	WError                          func(err error)
	WEventNames                     func() []string
	WFetch                          func(a0 string, a1 interface{}) ([]byte, error)
	WFile                           func(a0 string, a1 ...http.FileSystem) error
	WFire                           func(a0 interface{}) error
	WFireByName                     func(name string, options ...events.EventOption) error
	WFireByNameWithMap              func(name string, data param.Store) error
	WFireHostFound                  func() (bool, error)
	WFlash                          func(a0 ...string) interface{}
	WForm                           func(a0 string, a1 ...string) string
	WFormValues                     func(a0 string) []string
	WFormat                         func() string
	WForms                          func() map[string][]string
	WFormx                          func(a0 string, a1 ...string) param.String
	WFormxValues                    func(a0 string) param.StringSlice
	WFullRequestURI                 func() string
	WFuncs                          func() map[string]interface{}
	WGet                            func(a0 string, a1 ...interface{}) interface{}
	WGetCookie                      func(a0 string) string
	WGetFunc                        func(a0 string) interface{}
	WHTML                           func(a0 string, a1 ...int) error
	WHandle                         func(a0 echo.Context) error
	WHandler                        func() echo.Handler
	WHasAnyRequest                  func() bool
	WHasEvent                       func(a0 string) bool
	WHeader                         func(a0 string) string
	WHost                           func() string
	WHostP                          func(a0 int, a1 ...string) string
	WHostParam                      func(a0 string, a1 ...string) string
	WHostParamNames                 func() []string
	WHostParamValues                func() []string
	WIncr                           func(key string, n interface{}, defaults ...interface{}) int64
	WInternal                       func() *param.SafeMap
	WIsAjax                         func() bool
	WIsDel                          func() bool
	WIsGet                          func() bool
	WIsHead                         func() bool
	WIsMethod                       func(method string) bool
	WIsOptions                      func() bool
	WIsPatch                        func() bool
	WIsPjax                         func() bool
	WIsPost                         func() bool
	WIsPut                          func() bool
	WIsSecure                       func() bool
	WIsUpload                       func() bool
	WIsValidCache                   func(modifiedAt time.Time) bool
	WIsWebsocket                    func() bool
	WJSON                           func(a0 interface{}, a1 ...int) error
	WJSONBlob                       func(a0 []byte, a1 ...int) error
	WJSONP                          func(a0 string, a1 interface{}, a2 ...int) error
	WLang                           func() echo.LangCode
	WLogger                         func() logger.Logger
	WMapData                        func(i interface{}, data map[string][]string, names ...string) error
	WMapForm                        func(i interface{}, names ...string) error
	WMethod                         func() string
	WMustBind                       func(a0 interface{}, a1 ...echo.FormDataFilter) error
	WMustBindAndValidate            func(a0 interface{}, a1 ...echo.FormDataFilter) error
	WMustBindAndValidateWithDecoder func(a0 interface{}, a1 echo.BinderValueCustomDecoders, a2 ...echo.FormDataFilter) error
	WMustBindWithDecoder            func(a0 interface{}, a1 echo.BinderValueCustomDecoders, a2 ...echo.FormDataFilter) error
	WNewCookie                      func(a0 string, a1 string) *http.Cookie
	WNewError                       func(code code.Code, msg string, args ...interface{}) *echo.Error
	WNewErrorWith                   func(err error, code code.Code, args ...interface{}) *echo.Error
	WNoContent                      func(a0 ...int) error
	WNotModified                    func() error
	WObject                         func() *echo.XContext
	WOff                            func(a0 string) events.Emitterer
	WOn                             func(a0 string, a1 ...events.Listener) events.Emitterer
	WOnHostFound                    func(a0 func(echo.Context) (bool, error)) echo.Context
	WP                              func(a0 int, a1 ...string) string
	WParam                          func(a0 string, a1 ...string) string
	WParamNames                     func() []string
	WParamValues                    func() []string
	WParamx                         func(a0 string, a1 ...string) param.String
	WPath                           func() string
	WPjaxContainer                  func() string
	WPort                           func() int
	WPrintFuncs                     func()
	WProtocol                       func() string
	WProxy                          func() []string
	WPx                             func(a0 int, a1 ...string) param.String
	WQueries                        func() map[string][]string
	WQuery                          func(a0 string, a1 ...string) string
	WQueryValues                    func(a0 string) []string
	WQueryx                         func(a0 string, a1 ...string) param.String
	WQueryxValues                   func(a0 string) param.StringSlice
	WRealIP                         func() string
	WRedirect                       func(a0 string, a1 ...int) error
	WReferer                        func() string
	WRemoveEventListener            func(handler events.Listener)
	WRender                         func(a0 string, a1 interface{}, a2 ...int) error
	WRenderBy                       func(a0 string, a1 func(string) ([]byte, error), a2 interface{}, a3 ...int) ([]byte, error)
	WRenderDataWrapper              func() echo.DataWrapper
	WRenderer                       func() echo.Renderer
	WRequest                        func() engine.Request
	WRequestURI                     func() string
	WReset                          func(a0 engine.Request, a1 engine.Response)
	WResetFuncs                     func(a0 map[string]interface{})
	WResolveContentType             func() string
	WResolveFormat                  func() string
	WResponse                       func() engine.Response
	WRollback                       func() error
	WRoute                          func() *echo.Route
	WSSEvent                        func(a0 string, a1 chan interface{}) error
	WSaveUploadedFile               func(fieldName string, saveAbsPath string, saveFileName ...func(*multipart.FileHeader) (string, error)) (*multipart.FileHeader, error)
	WSaveUploadedFileToWriter       func(a0 string, a1 io.Writer) (*multipart.FileHeader, error)
	WSaveUploadedFiles              func(fieldName string, savePath func(*multipart.FileHeader) (string, error)) error
	WSaveUploadedFilesToWriter      func(fieldName string, writer func(*multipart.FileHeader) (io.Writer, error)) error
	WScheme                         func() string
	WServeCallbackContent           func(a0 func(echo.Context) (io.Reader, error), a1 string, a2 time.Time, a3 ...time.Duration) error
	WServeContent                   func(a0 io.Reader, a1 string, a2 time.Time, a3 ...time.Duration) error
	WSession                        func() echo.Sessioner
	WSessionOptions                 func() *echo.SessionOptions
	WSet                            func(a0 string, a1 interface{})
	WSetAuto                        func(on bool) echo.Context
	WSetCacheHeader                 func(modifiedAt time.Time, maxAge ...time.Duration)
	WSetCode                        func(a0 int)
	WSetCookie                      func(a0 string, a1 string, a2 ...interface{})
	WSetCookieOptions               func(a0 *echo.CookieOptions)
	WSetData                        func(a0 echo.Data)
	WSetDefaultExtension            func(a0 string)
	WSetEmitterer                   func(a0 events.Emitterer)
	WSetFormat                      func(a0 string)
	WSetFunc                        func(a0 string, a1 interface{})
	WSetHostParamNames              func(names ...string)
	WSetHostParamValues             func(values ...string)
	WSetParamNames                  func(names ...string)
	WSetParamValues                 func(values ...string)
	WSetPreResponseHook             func(a0 ...func() error) echo.Context
	WSetRenderDataWrapper           func(a0 echo.DataWrapper)
	WSetRenderer                    func(a0 echo.Renderer)
	WSetSessionOptions              func(a0 *echo.SessionOptions)
	WSetSessioner                   func(a0 echo.Sessioner)
	WSetTransaction                 func(t echo.Transaction)
	WSetTranslator                  func(a0 echo.Translator)
	WSetValidator                   func(a0 echo.Validator)
	WSetValue                       func(key string, value interface{})
	WSite                           func() string
	WStdContext                     func() context.Context
	WStored                         func() param.Store
	WStream                         func(a0 func(io.Writer) (bool, error)) error
	WString                         func(a0 string, a1 ...int) error
	WT                              func(format string, args ...interface{}) string
	WToParamString                  func(a0 string) param.String
	WToStringSlice                  func(a0 []string) param.StringSlice
	WTransaction                    func() echo.Transaction
	WValidate                       func(item interface{}, args ...interface{}) error
	WValidator                      func() echo.Validator
	WValue                          func(key any) any
	WWithContext                    func(ctx context.Context) *http.Request
	WWithFormatExtension            func(a0 bool)
	WXML                            func(a0 interface{}, a1 ...int) error
	WXMLBlob                        func(a0 []byte, a1 ...int) error
}

func (W _github_com_webx_top_echo_Context) Accept() *echo.Accepts {
	return W.WAccept()
}
func (W _github_com_webx_top_echo_Context) AddEventListener(handler events.Listener, events ...string) {
	W.WAddEventListener(handler, events...)
}
func (W _github_com_webx_top_echo_Context) AddPreResponseHook(a0 func() error) echo.Context {
	return W.WAddPreResponseHook(a0)
}
func (W _github_com_webx_top_echo_Context) Atop(a0 string) param.String {
	return W.WAtop(a0)
}
func (W _github_com_webx_top_echo_Context) Attachment(a0 io.Reader, a1 string, a2 time.Time, a3 ...bool) error {
	return W.WAttachment(a0, a1, a2, a3...)
}
func (W _github_com_webx_top_echo_Context) Begin() error {
	return W.WBegin()
}
func (W _github_com_webx_top_echo_Context) Bind(a0 interface{}, a1 ...echo.FormDataFilter) error {
	return W.WBind(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) BindAndValidate(a0 interface{}, a1 ...echo.FormDataFilter) error {
	return W.WBindAndValidate(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) BindAndValidateWithDecoder(a0 interface{}, a1 echo.BinderValueCustomDecoders, a2 ...echo.FormDataFilter) error {
	return W.WBindAndValidateWithDecoder(a0, a1, a2...)
}
func (W _github_com_webx_top_echo_Context) BindWithDecoder(a0 interface{}, a1 echo.BinderValueCustomDecoders, a2 ...echo.FormDataFilter) error {
	return W.WBindWithDecoder(a0, a1, a2...)
}
func (W _github_com_webx_top_echo_Context) Blob(a0 []byte, a1 ...int) error {
	return W.WBlob(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) CacheableAttachment(a0 io.Reader, a1 string, a2 time.Time, a3 time.Duration, a4 ...bool) error {
	return W.WCacheableAttachment(a0, a1, a2, a3, a4...)
}
func (W _github_com_webx_top_echo_Context) CacheableFile(a0 string, a1 time.Duration, a2 ...http.FileSystem) error {
	return W.WCacheableFile(a0, a1, a2...)
}
func (W _github_com_webx_top_echo_Context) Code() int {
	return W.WCode()
}
func (W _github_com_webx_top_echo_Context) Commit() error {
	return W.WCommit()
}
func (W _github_com_webx_top_echo_Context) Cookie() echo.Cookier {
	return W.WCookie()
}
func (W _github_com_webx_top_echo_Context) CookieOptions() *echo.CookieOptions {
	return W.WCookieOptions()
}
func (W _github_com_webx_top_echo_Context) Data() echo.Data {
	return W.WData()
}
func (W _github_com_webx_top_echo_Context) Deadline() (deadline time.Time, ok bool) {
	return W.WDeadline()
}
func (W _github_com_webx_top_echo_Context) Decr(key string, n interface{}, defaults ...interface{}) int64 {
	return W.WDecr(key, n, defaults...)
}
func (W _github_com_webx_top_echo_Context) DefaultExtension() string {
	return W.WDefaultExtension()
}
func (W _github_com_webx_top_echo_Context) Delete(a0 ...string) {
	W.WDelete(a0...)
}
func (W _github_com_webx_top_echo_Context) Dispatch(route string) echo.Handler {
	return W.WDispatch(route)
}
func (W _github_com_webx_top_echo_Context) Domain() string {
	return W.WDomain()
}
func (W _github_com_webx_top_echo_Context) Done() <-chan struct{} {
	return W.WDone()
}
func (W _github_com_webx_top_echo_Context) E(format string, args ...interface{}) error {
	return W.WE(format, args...)
}
func (W _github_com_webx_top_echo_Context) Echo() *echo.Echo {
	return W.WEcho()
}
func (W _github_com_webx_top_echo_Context) End(succeed bool) error {
	return W.WEnd(succeed)
}
func (W _github_com_webx_top_echo_Context) Err() error {
	return W.WErr()
}
func (W _github_com_webx_top_echo_Context) Error(err error) {
	W.WError(err)
}
func (W _github_com_webx_top_echo_Context) EventNames() []string {
	return W.WEventNames()
}
func (W _github_com_webx_top_echo_Context) Fetch(a0 string, a1 interface{}) ([]byte, error) {
	return W.WFetch(a0, a1)
}
func (W _github_com_webx_top_echo_Context) File(a0 string, a1 ...http.FileSystem) error {
	return W.WFile(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) Fire(a0 interface{}) error {
	return W.WFire(a0)
}
func (W _github_com_webx_top_echo_Context) FireByName(name string, options ...events.EventOption) error {
	return W.WFireByName(name, options...)
}
func (W _github_com_webx_top_echo_Context) FireByNameWithMap(name string, data param.Store) error {
	return W.WFireByNameWithMap(name, data)
}
func (W _github_com_webx_top_echo_Context) FireHostFound() (bool, error) {
	return W.WFireHostFound()
}
func (W _github_com_webx_top_echo_Context) Flash(a0 ...string) interface{} {
	return W.WFlash(a0...)
}
func (W _github_com_webx_top_echo_Context) Form(a0 string, a1 ...string) string {
	return W.WForm(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) FormValues(a0 string) []string {
	return W.WFormValues(a0)
}
func (W _github_com_webx_top_echo_Context) Format() string {
	return W.WFormat()
}
func (W _github_com_webx_top_echo_Context) Forms() map[string][]string {
	return W.WForms()
}
func (W _github_com_webx_top_echo_Context) Formx(a0 string, a1 ...string) param.String {
	return W.WFormx(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) FormxValues(a0 string) param.StringSlice {
	return W.WFormxValues(a0)
}
func (W _github_com_webx_top_echo_Context) FullRequestURI() string {
	return W.WFullRequestURI()
}
func (W _github_com_webx_top_echo_Context) Funcs() map[string]interface{} {
	return W.WFuncs()
}
func (W _github_com_webx_top_echo_Context) Get(a0 string, a1 ...interface{}) interface{} {
	return W.WGet(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) GetCookie(a0 string) string {
	return W.WGetCookie(a0)
}
func (W _github_com_webx_top_echo_Context) GetFunc(a0 string) interface{} {
	return W.WGetFunc(a0)
}
func (W _github_com_webx_top_echo_Context) HTML(a0 string, a1 ...int) error {
	return W.WHTML(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) Handle(a0 echo.Context) error {
	return W.WHandle(a0)
}
func (W _github_com_webx_top_echo_Context) Handler() echo.Handler {
	return W.WHandler()
}
func (W _github_com_webx_top_echo_Context) HasAnyRequest() bool {
	return W.WHasAnyRequest()
}
func (W _github_com_webx_top_echo_Context) HasEvent(a0 string) bool {
	return W.WHasEvent(a0)
}
func (W _github_com_webx_top_echo_Context) Header(a0 string) string {
	return W.WHeader(a0)
}
func (W _github_com_webx_top_echo_Context) Host() string {
	return W.WHost()
}
func (W _github_com_webx_top_echo_Context) HostP(a0 int, a1 ...string) string {
	return W.WHostP(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) HostParam(a0 string, a1 ...string) string {
	return W.WHostParam(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) HostParamNames() []string {
	return W.WHostParamNames()
}
func (W _github_com_webx_top_echo_Context) HostParamValues() []string {
	return W.WHostParamValues()
}
func (W _github_com_webx_top_echo_Context) Incr(key string, n interface{}, defaults ...interface{}) int64 {
	return W.WIncr(key, n, defaults...)
}
func (W _github_com_webx_top_echo_Context) Internal() *param.SafeMap {
	return W.WInternal()
}
func (W _github_com_webx_top_echo_Context) IsAjax() bool {
	return W.WIsAjax()
}
func (W _github_com_webx_top_echo_Context) IsDel() bool {
	return W.WIsDel()
}
func (W _github_com_webx_top_echo_Context) IsGet() bool {
	return W.WIsGet()
}
func (W _github_com_webx_top_echo_Context) IsHead() bool {
	return W.WIsHead()
}
func (W _github_com_webx_top_echo_Context) IsMethod(method string) bool {
	return W.WIsMethod(method)
}
func (W _github_com_webx_top_echo_Context) IsOptions() bool {
	return W.WIsOptions()
}
func (W _github_com_webx_top_echo_Context) IsPatch() bool {
	return W.WIsPatch()
}
func (W _github_com_webx_top_echo_Context) IsPjax() bool {
	return W.WIsPjax()
}
func (W _github_com_webx_top_echo_Context) IsPost() bool {
	return W.WIsPost()
}
func (W _github_com_webx_top_echo_Context) IsPut() bool {
	return W.WIsPut()
}
func (W _github_com_webx_top_echo_Context) IsSecure() bool {
	return W.WIsSecure()
}
func (W _github_com_webx_top_echo_Context) IsUpload() bool {
	return W.WIsUpload()
}
func (W _github_com_webx_top_echo_Context) IsValidCache(modifiedAt time.Time) bool {
	return W.WIsValidCache(modifiedAt)
}
func (W _github_com_webx_top_echo_Context) IsWebsocket() bool {
	return W.WIsWebsocket()
}
func (W _github_com_webx_top_echo_Context) JSON(a0 interface{}, a1 ...int) error {
	return W.WJSON(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) JSONBlob(a0 []byte, a1 ...int) error {
	return W.WJSONBlob(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) JSONP(a0 string, a1 interface{}, a2 ...int) error {
	return W.WJSONP(a0, a1, a2...)
}
func (W _github_com_webx_top_echo_Context) Lang() echo.LangCode {
	return W.WLang()
}
func (W _github_com_webx_top_echo_Context) Logger() logger.Logger {
	return W.WLogger()
}
func (W _github_com_webx_top_echo_Context) MapData(i interface{}, data map[string][]string, names ...string) error {
	return W.WMapData(i, data, names...)
}
func (W _github_com_webx_top_echo_Context) MapForm(i interface{}, names ...string) error {
	return W.WMapForm(i, names...)
}
func (W _github_com_webx_top_echo_Context) Method() string {
	return W.WMethod()
}
func (W _github_com_webx_top_echo_Context) MustBind(a0 interface{}, a1 ...echo.FormDataFilter) error {
	return W.WMustBind(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) MustBindAndValidate(a0 interface{}, a1 ...echo.FormDataFilter) error {
	return W.WMustBindAndValidate(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) MustBindAndValidateWithDecoder(a0 interface{}, a1 echo.BinderValueCustomDecoders, a2 ...echo.FormDataFilter) error {
	return W.WMustBindAndValidateWithDecoder(a0, a1, a2...)
}
func (W _github_com_webx_top_echo_Context) MustBindWithDecoder(a0 interface{}, a1 echo.BinderValueCustomDecoders, a2 ...echo.FormDataFilter) error {
	return W.WMustBindWithDecoder(a0, a1, a2...)
}
func (W _github_com_webx_top_echo_Context) NewCookie(a0 string, a1 string) *http.Cookie {
	return W.WNewCookie(a0, a1)
}
func (W _github_com_webx_top_echo_Context) NewError(code code.Code, msg string, args ...interface{}) *echo.Error {
	return W.WNewError(code, msg, args...)
}
func (W _github_com_webx_top_echo_Context) NewErrorWith(err error, code code.Code, args ...interface{}) *echo.Error {
	return W.WNewErrorWith(err, code, args...)
}
func (W _github_com_webx_top_echo_Context) NoContent(a0 ...int) error {
	return W.WNoContent(a0...)
}
func (W _github_com_webx_top_echo_Context) NotModified() error {
	return W.WNotModified()
}
func (W _github_com_webx_top_echo_Context) Object() *echo.XContext {
	return W.WObject()
}
func (W _github_com_webx_top_echo_Context) Off(a0 string) events.Emitterer {
	return W.WOff(a0)
}
func (W _github_com_webx_top_echo_Context) On(a0 string, a1 ...events.Listener) events.Emitterer {
	return W.WOn(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) OnHostFound(a0 func(echo.Context) (bool, error)) echo.Context {
	return W.WOnHostFound(a0)
}
func (W _github_com_webx_top_echo_Context) P(a0 int, a1 ...string) string {
	return W.WP(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) Param(a0 string, a1 ...string) string {
	return W.WParam(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) ParamNames() []string {
	return W.WParamNames()
}
func (W _github_com_webx_top_echo_Context) ParamValues() []string {
	return W.WParamValues()
}
func (W _github_com_webx_top_echo_Context) Paramx(a0 string, a1 ...string) param.String {
	return W.WParamx(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) Path() string {
	return W.WPath()
}
func (W _github_com_webx_top_echo_Context) PjaxContainer() string {
	return W.WPjaxContainer()
}
func (W _github_com_webx_top_echo_Context) Port() int {
	return W.WPort()
}
func (W _github_com_webx_top_echo_Context) PrintFuncs() {
	W.WPrintFuncs()
}
func (W _github_com_webx_top_echo_Context) Protocol() string {
	return W.WProtocol()
}
func (W _github_com_webx_top_echo_Context) Proxy() []string {
	return W.WProxy()
}
func (W _github_com_webx_top_echo_Context) Px(a0 int, a1 ...string) param.String {
	return W.WPx(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) Queries() map[string][]string {
	return W.WQueries()
}
func (W _github_com_webx_top_echo_Context) Query(a0 string, a1 ...string) string {
	return W.WQuery(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) QueryValues(a0 string) []string {
	return W.WQueryValues(a0)
}
func (W _github_com_webx_top_echo_Context) Queryx(a0 string, a1 ...string) param.String {
	return W.WQueryx(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) QueryxValues(a0 string) param.StringSlice {
	return W.WQueryxValues(a0)
}
func (W _github_com_webx_top_echo_Context) RealIP() string {
	return W.WRealIP()
}
func (W _github_com_webx_top_echo_Context) Redirect(a0 string, a1 ...int) error {
	return W.WRedirect(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) Referer() string {
	return W.WReferer()
}
func (W _github_com_webx_top_echo_Context) RemoveEventListener(handler events.Listener) {
	W.WRemoveEventListener(handler)
}
func (W _github_com_webx_top_echo_Context) Render(a0 string, a1 interface{}, a2 ...int) error {
	return W.WRender(a0, a1, a2...)
}
func (W _github_com_webx_top_echo_Context) RenderBy(a0 string, a1 func(string) ([]byte, error), a2 interface{}, a3 ...int) ([]byte, error) {
	return W.WRenderBy(a0, a1, a2, a3...)
}
func (W _github_com_webx_top_echo_Context) RenderDataWrapper() echo.DataWrapper {
	return W.WRenderDataWrapper()
}
func (W _github_com_webx_top_echo_Context) Renderer() echo.Renderer {
	return W.WRenderer()
}
func (W _github_com_webx_top_echo_Context) Request() engine.Request {
	return W.WRequest()
}
func (W _github_com_webx_top_echo_Context) RequestURI() string {
	return W.WRequestURI()
}
func (W _github_com_webx_top_echo_Context) Reset(a0 engine.Request, a1 engine.Response) {
	W.WReset(a0, a1)
}
func (W _github_com_webx_top_echo_Context) ResetFuncs(a0 map[string]interface{}) {
	W.WResetFuncs(a0)
}
func (W _github_com_webx_top_echo_Context) ResolveContentType() string {
	return W.WResolveContentType()
}
func (W _github_com_webx_top_echo_Context) ResolveFormat() string {
	return W.WResolveFormat()
}
func (W _github_com_webx_top_echo_Context) Response() engine.Response {
	return W.WResponse()
}
func (W _github_com_webx_top_echo_Context) Rollback() error {
	return W.WRollback()
}
func (W _github_com_webx_top_echo_Context) Route() *echo.Route {
	return W.WRoute()
}
func (W _github_com_webx_top_echo_Context) SSEvent(a0 string, a1 chan interface{}) error {
	return W.WSSEvent(a0, a1)
}
func (W _github_com_webx_top_echo_Context) SaveUploadedFile(fieldName string, saveAbsPath string, saveFileName ...func(*multipart.FileHeader) (string, error)) (*multipart.FileHeader, error) {
	return W.WSaveUploadedFile(fieldName, saveAbsPath, saveFileName...)
}
func (W _github_com_webx_top_echo_Context) SaveUploadedFileToWriter(a0 string, a1 io.Writer) (*multipart.FileHeader, error) {
	return W.WSaveUploadedFileToWriter(a0, a1)
}
func (W _github_com_webx_top_echo_Context) SaveUploadedFiles(fieldName string, savePath func(*multipart.FileHeader) (string, error)) error {
	return W.WSaveUploadedFiles(fieldName, savePath)
}
func (W _github_com_webx_top_echo_Context) SaveUploadedFilesToWriter(fieldName string, writer func(*multipart.FileHeader) (io.Writer, error)) error {
	return W.WSaveUploadedFilesToWriter(fieldName, writer)
}
func (W _github_com_webx_top_echo_Context) Scheme() string {
	return W.WScheme()
}
func (W _github_com_webx_top_echo_Context) ServeCallbackContent(a0 func(echo.Context) (io.Reader, error), a1 string, a2 time.Time, a3 ...time.Duration) error {
	return W.WServeCallbackContent(a0, a1, a2, a3...)
}
func (W _github_com_webx_top_echo_Context) ServeContent(a0 io.Reader, a1 string, a2 time.Time, a3 ...time.Duration) error {
	return W.WServeContent(a0, a1, a2, a3...)
}
func (W _github_com_webx_top_echo_Context) Session() echo.Sessioner {
	return W.WSession()
}
func (W _github_com_webx_top_echo_Context) SessionOptions() *echo.SessionOptions {
	return W.WSessionOptions()
}
func (W _github_com_webx_top_echo_Context) Set(a0 string, a1 interface{}) {
	W.WSet(a0, a1)
}
func (W _github_com_webx_top_echo_Context) SetAuto(on bool) echo.Context {
	return W.WSetAuto(on)
}
func (W _github_com_webx_top_echo_Context) SetCacheHeader(modifiedAt time.Time, maxAge ...time.Duration) {
	W.WSetCacheHeader(modifiedAt, maxAge...)
}
func (W _github_com_webx_top_echo_Context) SetCode(a0 int) {
	W.WSetCode(a0)
}
func (W _github_com_webx_top_echo_Context) SetCookie(a0 string, a1 string, a2 ...interface{}) {
	W.WSetCookie(a0, a1, a2...)
}
func (W _github_com_webx_top_echo_Context) SetCookieOptions(a0 *echo.CookieOptions) {
	W.WSetCookieOptions(a0)
}
func (W _github_com_webx_top_echo_Context) SetData(a0 echo.Data) {
	W.WSetData(a0)
}
func (W _github_com_webx_top_echo_Context) SetDefaultExtension(a0 string) {
	W.WSetDefaultExtension(a0)
}
func (W _github_com_webx_top_echo_Context) SetEmitterer(a0 events.Emitterer) {
	W.WSetEmitterer(a0)
}
func (W _github_com_webx_top_echo_Context) SetFormat(a0 string) {
	W.WSetFormat(a0)
}
func (W _github_com_webx_top_echo_Context) SetFunc(a0 string, a1 interface{}) {
	W.WSetFunc(a0, a1)
}
func (W _github_com_webx_top_echo_Context) SetHostParamNames(names ...string) {
	W.WSetHostParamNames(names...)
}
func (W _github_com_webx_top_echo_Context) SetHostParamValues(values ...string) {
	W.WSetHostParamValues(values...)
}
func (W _github_com_webx_top_echo_Context) SetParamNames(names ...string) {
	W.WSetParamNames(names...)
}
func (W _github_com_webx_top_echo_Context) SetParamValues(values ...string) {
	W.WSetParamValues(values...)
}
func (W _github_com_webx_top_echo_Context) SetPreResponseHook(a0 ...func() error) echo.Context {
	return W.WSetPreResponseHook(a0...)
}
func (W _github_com_webx_top_echo_Context) SetRenderDataWrapper(a0 echo.DataWrapper) {
	W.WSetRenderDataWrapper(a0)
}
func (W _github_com_webx_top_echo_Context) SetRenderer(a0 echo.Renderer) {
	W.WSetRenderer(a0)
}
func (W _github_com_webx_top_echo_Context) SetSessionOptions(a0 *echo.SessionOptions) {
	W.WSetSessionOptions(a0)
}
func (W _github_com_webx_top_echo_Context) SetSessioner(a0 echo.Sessioner) {
	W.WSetSessioner(a0)
}
func (W _github_com_webx_top_echo_Context) SetTransaction(t echo.Transaction) {
	W.WSetTransaction(t)
}
func (W _github_com_webx_top_echo_Context) SetTranslator(a0 echo.Translator) {
	W.WSetTranslator(a0)
}
func (W _github_com_webx_top_echo_Context) SetValidator(a0 echo.Validator) {
	W.WSetValidator(a0)
}
func (W _github_com_webx_top_echo_Context) SetValue(key string, value interface{}) {
	W.WSetValue(key, value)
}
func (W _github_com_webx_top_echo_Context) Site() string {
	return W.WSite()
}
func (W _github_com_webx_top_echo_Context) StdContext() context.Context {
	return W.WStdContext()
}
func (W _github_com_webx_top_echo_Context) Stored() param.Store {
	return W.WStored()
}
func (W _github_com_webx_top_echo_Context) Stream(a0 func(io.Writer) (bool, error)) error {
	return W.WStream(a0)
}
func (W _github_com_webx_top_echo_Context) String(a0 string, a1 ...int) error {
	if W.WString == nil {
		return nil
	}
	return W.WString(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) T(format string, args ...interface{}) string {
	return W.WT(format, args...)
}
func (W _github_com_webx_top_echo_Context) ToParamString(a0 string) param.String {
	return W.WToParamString(a0)
}
func (W _github_com_webx_top_echo_Context) ToStringSlice(a0 []string) param.StringSlice {
	return W.WToStringSlice(a0)
}
func (W _github_com_webx_top_echo_Context) Transaction() echo.Transaction {
	return W.WTransaction()
}
func (W _github_com_webx_top_echo_Context) Validate(item interface{}, args ...interface{}) error {
	return W.WValidate(item, args...)
}
func (W _github_com_webx_top_echo_Context) Validator() echo.Validator {
	return W.WValidator()
}
func (W _github_com_webx_top_echo_Context) Value(key any) any {
	return W.WValue(key)
}
func (W _github_com_webx_top_echo_Context) WithContext(ctx context.Context) *http.Request {
	return W.WWithContext(ctx)
}
func (W _github_com_webx_top_echo_Context) WithFormatExtension(a0 bool) {
	W.WWithFormatExtension(a0)
}
func (W _github_com_webx_top_echo_Context) XML(a0 interface{}, a1 ...int) error {
	return W.WXML(a0, a1...)
}
func (W _github_com_webx_top_echo_Context) XMLBlob(a0 []byte, a1 ...int) error {
	return W.WXMLBlob(a0, a1...)
}

// _github_com_webx_top_echo_ContextRegister is an interface wrapper for ContextRegister type
type _github_com_webx_top_echo_ContextRegister struct {
	IValue      interface{}
	WSetContext func(a0 echo.Context)
}

func (W _github_com_webx_top_echo_ContextRegister) SetContext(a0 echo.Context) {
	W.WSetContext(a0)
}

// _github_com_webx_top_echo_ContextReseter is an interface wrapper for ContextReseter type
type _github_com_webx_top_echo_ContextReseter struct {
	IValue interface{}
	WReset func(req engine.Request, res engine.Response)
}

func (W _github_com_webx_top_echo_ContextReseter) Reset(req engine.Request, res engine.Response) {
	W.WReset(req, res)
}

// _github_com_webx_top_echo_Cookier is an interface wrapper for Cookier type
type _github_com_webx_top_echo_Cookier struct {
	IValue interface{}
	WAdd   func(cookies ...*http.Cookie) echo.Cookier
	WGet   func(key string) string
	WSend  func()
	WSet   func(key string, val string, args ...interface{}) echo.Cookier
}

func (W _github_com_webx_top_echo_Cookier) Add(cookies ...*http.Cookie) echo.Cookier {
	return W.WAdd(cookies...)
}
func (W _github_com_webx_top_echo_Cookier) Get(key string) string {
	return W.WGet(key)
}
func (W _github_com_webx_top_echo_Cookier) Send() {
	W.WSend()
}
func (W _github_com_webx_top_echo_Cookier) Set(key string, val string, args ...interface{}) echo.Cookier {
	return W.WSet(key, val, args...)
}

// _github_com_webx_top_echo_Data is an interface wrapper for Data type
type _github_com_webx_top_echo_Data struct {
	IValue        interface{}
	WGetCode      func() code.Code
	WGetData      func() interface{}
	WGetInfo      func() interface{}
	WGetURL       func() string
	WGetZone      func() interface{}
	WGets         func() (code code.Code, info interface{}, zone interface{}, data interface{})
	WJSON         func(codes ...int) error
	WJSONP        func(callback string, codes ...int) error
	WReset        func() echo.Data
	WSet          func(code int, args ...interface{}) echo.Data
	WSetByMap     func(a0 param.Store) echo.Data
	WSetCode      func(code int) echo.Data
	WSetContext   func(ctx echo.Context) echo.Data
	WSetData      func(data interface{}, args ...int) echo.Data
	WSetError     func(err error, args ...int) echo.Data
	WSetInfo      func(info interface{}, args ...int) echo.Data
	WSetTmplFuncs func()
	WSetURL       func(url string, args ...int) echo.Data
	WSetZone      func(zone interface{}) echo.Data
	WString       func() string
	WXML          func(codes ...int) error
}

func (W _github_com_webx_top_echo_Data) GetCode() code.Code {
	return W.WGetCode()
}
func (W _github_com_webx_top_echo_Data) GetData() interface{} {
	return W.WGetData()
}
func (W _github_com_webx_top_echo_Data) GetInfo() interface{} {
	return W.WGetInfo()
}
func (W _github_com_webx_top_echo_Data) GetURL() string {
	return W.WGetURL()
}
func (W _github_com_webx_top_echo_Data) GetZone() interface{} {
	return W.WGetZone()
}
func (W _github_com_webx_top_echo_Data) Gets() (code code.Code, info interface{}, zone interface{}, data interface{}) {
	return W.WGets()
}
func (W _github_com_webx_top_echo_Data) JSON(codes ...int) error {
	return W.WJSON(codes...)
}
func (W _github_com_webx_top_echo_Data) JSONP(callback string, codes ...int) error {
	return W.WJSONP(callback, codes...)
}
func (W _github_com_webx_top_echo_Data) Reset() echo.Data {
	return W.WReset()
}
func (W _github_com_webx_top_echo_Data) Set(code int, args ...interface{}) echo.Data {
	return W.WSet(code, args...)
}
func (W _github_com_webx_top_echo_Data) SetByMap(a0 param.Store) echo.Data {
	return W.WSetByMap(a0)
}
func (W _github_com_webx_top_echo_Data) SetCode(code int) echo.Data {
	return W.WSetCode(code)
}
func (W _github_com_webx_top_echo_Data) SetContext(ctx echo.Context) echo.Data {
	return W.WSetContext(ctx)
}
func (W _github_com_webx_top_echo_Data) SetData(data interface{}, args ...int) echo.Data {
	return W.WSetData(data, args...)
}
func (W _github_com_webx_top_echo_Data) SetError(err error, args ...int) echo.Data {
	return W.WSetError(err, args...)
}
func (W _github_com_webx_top_echo_Data) SetInfo(info interface{}, args ...int) echo.Data {
	return W.WSetInfo(info, args...)
}
func (W _github_com_webx_top_echo_Data) SetTmplFuncs() {
	W.WSetTmplFuncs()
}
func (W _github_com_webx_top_echo_Data) SetURL(url string, args ...int) echo.Data {
	return W.WSetURL(url, args...)
}
func (W _github_com_webx_top_echo_Data) SetZone(zone interface{}) echo.Data {
	return W.WSetZone(zone)
}
func (W _github_com_webx_top_echo_Data) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}
func (W _github_com_webx_top_echo_Data) XML(codes ...int) error {
	return W.WXML(codes...)
}

// _github_com_webx_top_echo_ErrUnwrap is an interface wrapper for ErrUnwrap type
type _github_com_webx_top_echo_ErrUnwrap struct {
	IValue  interface{}
	WUnwrap func() error
}

func (W _github_com_webx_top_echo_ErrUnwrap) Unwrap() error {
	return W.WUnwrap()
}

// _github_com_webx_top_echo_FiltersGetter is an interface wrapper for FiltersGetter type
type _github_com_webx_top_echo_FiltersGetter struct {
	IValue   interface{}
	WFilters func(a0 echo.Context) []echo.FormDataFilter
}

func (W _github_com_webx_top_echo_FiltersGetter) Filters(a0 echo.Context) []echo.FormDataFilter {
	return W.WFilters(a0)
}

// _github_com_webx_top_echo_FormNameFormatterGetter is an interface wrapper for FormNameFormatterGetter type
type _github_com_webx_top_echo_FormNameFormatterGetter struct {
	IValue             interface{}
	WFormNameFormatter func(a0 echo.Context) echo.FieldNameFormatter
}

func (W _github_com_webx_top_echo_FormNameFormatterGetter) FormNameFormatter(a0 echo.Context) echo.FieldNameFormatter {
	return W.WFormNameFormatter(a0)
}

// _github_com_webx_top_echo_FromConversion is an interface wrapper for FromConversion type
type _github_com_webx_top_echo_FromConversion struct {
	IValue      interface{}
	WFromString func(content string) error
}

func (W _github_com_webx_top_echo_FromConversion) FromString(content string) error {
	return W.WFromString(content)
}

// _github_com_webx_top_echo_Handler is an interface wrapper for Handler type
type _github_com_webx_top_echo_Handler struct {
	IValue  interface{}
	WHandle func(a0 echo.Context) error
}

func (W _github_com_webx_top_echo_Handler) Handle(a0 echo.Context) error {
	return W.WHandle(a0)
}

// _github_com_webx_top_echo_Hoster is an interface wrapper for Hoster type
type _github_com_webx_top_echo_Hoster struct {
	IValue     interface{}
	WAlias     func() string
	WFormat    func(args ...interface{}) string
	WFormatMap func(params param.Store) string
	WMatch     func(host string) (r []string, hasExpr bool)
	WName      func() string
	WRegExp    func() *regexp.Regexp
}

func (W _github_com_webx_top_echo_Hoster) Alias() string {
	return W.WAlias()
}
func (W _github_com_webx_top_echo_Hoster) Format(args ...interface{}) string {
	return W.WFormat(args...)
}
func (W _github_com_webx_top_echo_Hoster) FormatMap(params param.Store) string {
	return W.WFormatMap(params)
}
func (W _github_com_webx_top_echo_Hoster) Match(host string) (r []string, hasExpr bool) {
	return W.WMatch(host)
}
func (W _github_com_webx_top_echo_Hoster) Name() string {
	return W.WName()
}
func (W _github_com_webx_top_echo_Hoster) RegExp() *regexp.Regexp {
	return W.WRegExp()
}

// _github_com_webx_top_echo_ICore is an interface wrapper for ICore type
type _github_com_webx_top_echo_ICore struct {
	IValue       interface{}
	WAny         func(path string, h interface{}, middleware ...interface{}) echo.IRouter
	WConnect     func(path string, h interface{}, m ...interface{}) echo.IRouter
	WDelete      func(path string, h interface{}, m ...interface{}) echo.IRouter
	WFile        func(path string, file string)
	WGet         func(path string, h interface{}, m ...interface{}) echo.IRouter
	WGroup       func(prefix string, middleware ...interface{}) *echo.Group
	WHead        func(path string, h interface{}, m ...interface{}) echo.IRouter
	WMatch       func(methods []string, path string, h interface{}, middleware ...interface{}) echo.IRouter
	WOptions     func(path string, h interface{}, m ...interface{}) echo.IRouter
	WPatch       func(path string, h interface{}, m ...interface{}) echo.IRouter
	WPost        func(path string, h interface{}, m ...interface{}) echo.IRouter
	WPre         func(middleware ...interface{})
	WPrefix      func() string
	WPut         func(path string, h interface{}, m ...interface{}) echo.IRouter
	WRoute       func(methods string, path string, h interface{}, middleware ...interface{}) echo.IRouter
	WSetRenderer func(a0 echo.Renderer)
	WStatic      func(prefix string, root string)
	WTrace       func(path string, h interface{}, m ...interface{}) echo.IRouter
	WURL         func(a0 interface{}, a1 ...interface{}) string
	WUse         func(middleware ...interface{})
}

func (W _github_com_webx_top_echo_ICore) Any(path string, h interface{}, middleware ...interface{}) echo.IRouter {
	return W.WAny(path, h, middleware...)
}
func (W _github_com_webx_top_echo_ICore) Connect(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WConnect(path, h, m...)
}
func (W _github_com_webx_top_echo_ICore) Delete(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WDelete(path, h, m...)
}
func (W _github_com_webx_top_echo_ICore) File(path string, file string) {
	W.WFile(path, file)
}
func (W _github_com_webx_top_echo_ICore) Get(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WGet(path, h, m...)
}
func (W _github_com_webx_top_echo_ICore) Group(prefix string, middleware ...interface{}) *echo.Group {
	return W.WGroup(prefix, middleware...)
}
func (W _github_com_webx_top_echo_ICore) Head(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WHead(path, h, m...)
}
func (W _github_com_webx_top_echo_ICore) Match(methods []string, path string, h interface{}, middleware ...interface{}) echo.IRouter {
	return W.WMatch(methods, path, h, middleware...)
}
func (W _github_com_webx_top_echo_ICore) Options(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WOptions(path, h, m...)
}
func (W _github_com_webx_top_echo_ICore) Patch(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WPatch(path, h, m...)
}
func (W _github_com_webx_top_echo_ICore) Post(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WPost(path, h, m...)
}
func (W _github_com_webx_top_echo_ICore) Pre(middleware ...interface{}) {
	W.WPre(middleware...)
}
func (W _github_com_webx_top_echo_ICore) Prefix() string {
	return W.WPrefix()
}
func (W _github_com_webx_top_echo_ICore) Put(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WPut(path, h, m...)
}
func (W _github_com_webx_top_echo_ICore) Route(methods string, path string, h interface{}, middleware ...interface{}) echo.IRouter {
	return W.WRoute(methods, path, h, middleware...)
}
func (W _github_com_webx_top_echo_ICore) SetRenderer(a0 echo.Renderer) {
	W.WSetRenderer(a0)
}
func (W _github_com_webx_top_echo_ICore) Static(prefix string, root string) {
	W.WStatic(prefix, root)
}
func (W _github_com_webx_top_echo_ICore) Trace(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WTrace(path, h, m...)
}
func (W _github_com_webx_top_echo_ICore) URL(a0 interface{}, a1 ...interface{}) string {
	return W.WURL(a0, a1...)
}
func (W _github_com_webx_top_echo_ICore) Use(middleware ...interface{}) {
	W.WUse(middleware...)
}

// _github_com_webx_top_echo_IRouter is an interface wrapper for IRouter type
type _github_com_webx_top_echo_IRouter struct {
	IValue     interface{}
	WGetMeta   func() param.Store
	WGetName   func() string
	WSetMeta   func(a0 param.Store) echo.IRouter
	WSetMetaKV func(a0 string, a1 interface{}) echo.IRouter
	WSetName   func(a0 string) echo.IRouter
}

func (W _github_com_webx_top_echo_IRouter) GetMeta() param.Store {
	return W.WGetMeta()
}
func (W _github_com_webx_top_echo_IRouter) GetName() string {
	return W.WGetName()
}
func (W _github_com_webx_top_echo_IRouter) SetMeta(a0 param.Store) echo.IRouter {
	return W.WSetMeta(a0)
}
func (W _github_com_webx_top_echo_IRouter) SetMetaKV(a0 string, a1 interface{}) echo.IRouter {
	return W.WSetMetaKV(a0, a1)
}
func (W _github_com_webx_top_echo_IRouter) SetName(a0 string) echo.IRouter {
	return W.WSetName(a0)
}

// _github_com_webx_top_echo_IsHiddenContext is an interface wrapper for IsHiddenContext type
type _github_com_webx_top_echo_IsHiddenContext struct {
	IValue    interface{}
	WIsHidden func(a0 echo.Context) bool
}

func (W _github_com_webx_top_echo_IsHiddenContext) IsHidden(a0 echo.Context) bool {
	return W.WIsHidden(a0)
}

// _github_com_webx_top_echo_IsValidContext is an interface wrapper for IsValidContext type
type _github_com_webx_top_echo_IsValidContext struct {
	IValue   interface{}
	WIsValid func(a0 echo.Context) bool
}

func (W _github_com_webx_top_echo_IsValidContext) IsValid(a0 echo.Context) bool {
	return W.WIsValid(a0)
}

// _github_com_webx_top_echo_JSONModifer is an interface wrapper for JSONModifer type
type _github_com_webx_top_echo_JSONModifer struct {
	IValue interface{}
	WJSON  func(a0 echo.Context) (interface{}, error)
}

func (W _github_com_webx_top_echo_JSONModifer) JSON(a0 echo.Context) (interface{}, error) {
	return W.WJSON(a0)
}

// _github_com_webx_top_echo_LangCode is an interface wrapper for LangCode type
type _github_com_webx_top_echo_LangCode struct {
	IValue     interface{}
	WFormat    func(regionUppercase bool, separator ...string) string
	WLanguage  func() string
	WNormalize func() string
	WRegion    func(regionUppercase bool) string
	WString    func() string
}

func (W _github_com_webx_top_echo_LangCode) Format(regionUppercase bool, separator ...string) string {
	return W.WFormat(regionUppercase, separator...)
}
func (W _github_com_webx_top_echo_LangCode) Language() string {
	return W.WLanguage()
}
func (W _github_com_webx_top_echo_LangCode) Normalize() string {
	return W.WNormalize()
}
func (W _github_com_webx_top_echo_LangCode) Region(regionUppercase bool) string {
	return W.WRegion(regionUppercase)
}
func (W _github_com_webx_top_echo_LangCode) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}

// _github_com_webx_top_echo_Meta is an interface wrapper for Meta type
type _github_com_webx_top_echo_Meta struct {
	IValue interface{}
	WMeta  func() param.Store
}

func (W _github_com_webx_top_echo_Meta) Meta() param.Store {
	return W.WMeta()
}

// _github_com_webx_top_echo_MetaValidator is an interface wrapper for MetaValidator type
type _github_com_webx_top_echo_MetaValidator struct {
	IValue         interface{}
	WFilters       func(a0 echo.Context) []echo.FormDataFilter
	WMethods       func() []string
	WValueDecoders func(a0 echo.Context) echo.BinderValueCustomDecoders
}

func (W _github_com_webx_top_echo_MetaValidator) Filters(a0 echo.Context) []echo.FormDataFilter {
	return W.WFilters(a0)
}
func (W _github_com_webx_top_echo_MetaValidator) Methods() []string {
	return W.WMethods()
}
func (W _github_com_webx_top_echo_MetaValidator) ValueDecoders(a0 echo.Context) echo.BinderValueCustomDecoders {
	return W.WValueDecoders(a0)
}

// _github_com_webx_top_echo_MethodGetter is an interface wrapper for MethodGetter type
type _github_com_webx_top_echo_MethodGetter struct {
	IValue   interface{}
	WMethods func() []string
}

func (W _github_com_webx_top_echo_MethodGetter) Methods() []string {
	return W.WMethods()
}

// _github_com_webx_top_echo_Middleware is an interface wrapper for Middleware type
type _github_com_webx_top_echo_Middleware struct {
	IValue  interface{}
	WHandle func(a0 echo.Handler) echo.Handler
}

func (W _github_com_webx_top_echo_Middleware) Handle(a0 echo.Handler) echo.Handler {
	return W.WHandle(a0)
}

// _github_com_webx_top_echo_MiddlewareRegister is an interface wrapper for MiddlewareRegister type
type _github_com_webx_top_echo_MiddlewareRegister struct {
	IValue interface{}
	WPre   func(middleware ...interface{})
	WUse   func(middleware ...interface{})
}

func (W _github_com_webx_top_echo_MiddlewareRegister) Pre(middleware ...interface{}) {
	W.WPre(middleware...)
}
func (W _github_com_webx_top_echo_MiddlewareRegister) Use(middleware ...interface{}) {
	W.WUse(middleware...)
}

// _github_com_webx_top_echo_Name is an interface wrapper for Name type
type _github_com_webx_top_echo_Name struct {
	IValue interface{}
	WName  func() string
}

func (W _github_com_webx_top_echo_Name) Name() string {
	return W.WName()
}

// _github_com_webx_top_echo_Prefixer is an interface wrapper for Prefixer type
type _github_com_webx_top_echo_Prefixer struct {
	IValue  interface{}
	WPrefix func() string
}

func (W _github_com_webx_top_echo_Prefixer) Prefix() string {
	return W.WPrefix()
}

// _github_com_webx_top_echo_RenderContext is an interface wrapper for RenderContext type
type _github_com_webx_top_echo_RenderContext struct {
	IValue  interface{}
	WRender func(a0 echo.Context) template.HTML
}

func (W _github_com_webx_top_echo_RenderContext) Render(a0 echo.Context) template.HTML {
	return W.WRender(a0)
}

// _github_com_webx_top_echo_RenderDataContext is an interface wrapper for RenderDataContext type
type _github_com_webx_top_echo_RenderDataContext struct {
	IValue      interface{}
	WRenderData func(a0 echo.Context, a1 interface{}) template.HTML
}

func (W _github_com_webx_top_echo_RenderDataContext) RenderData(a0 echo.Context, a1 interface{}) template.HTML {
	return W.WRenderData(a0, a1)
}

// _github_com_webx_top_echo_Renderer is an interface wrapper for Renderer type
type _github_com_webx_top_echo_Renderer struct {
	IValue    interface{}
	WRender   func(w io.Writer, name string, data interface{}, c echo.Context) error
	WRenderBy func(w io.Writer, name string, content func(string) ([]byte, error), data interface{}, c echo.Context) error
}

func (W _github_com_webx_top_echo_Renderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
	return W.WRender(w, name, data, c)
}
func (W _github_com_webx_top_echo_Renderer) RenderBy(w io.Writer, name string, content func(string) ([]byte, error), data interface{}, c echo.Context) error {
	return W.WRenderBy(w, name, content, data, c)
}

// _github_com_webx_top_echo_RendererRegister is an interface wrapper for RendererRegister type
type _github_com_webx_top_echo_RendererRegister struct {
	IValue       interface{}
	WSetRenderer func(a0 echo.Renderer)
}

func (W _github_com_webx_top_echo_RendererRegister) SetRenderer(a0 echo.Renderer) {
	W.WSetRenderer(a0)
}

// _github_com_webx_top_echo_Rewriter is an interface wrapper for Rewriter type
type _github_com_webx_top_echo_Rewriter struct {
	IValue   interface{}
	WRewrite func(a0 string) string
}

func (W _github_com_webx_top_echo_Rewriter) Rewrite(a0 string) string {
	return W.WRewrite(a0)
}

// _github_com_webx_top_echo_RouteRegister is an interface wrapper for RouteRegister type
type _github_com_webx_top_echo_RouteRegister struct {
	IValue   interface{}
	WAny     func(path string, h interface{}, middleware ...interface{}) echo.IRouter
	WConnect func(path string, h interface{}, m ...interface{}) echo.IRouter
	WDelete  func(path string, h interface{}, m ...interface{}) echo.IRouter
	WFile    func(path string, file string)
	WGet     func(path string, h interface{}, m ...interface{}) echo.IRouter
	WGroup   func(prefix string, middleware ...interface{}) *echo.Group
	WHead    func(path string, h interface{}, m ...interface{}) echo.IRouter
	WMatch   func(methods []string, path string, h interface{}, middleware ...interface{}) echo.IRouter
	WOptions func(path string, h interface{}, m ...interface{}) echo.IRouter
	WPatch   func(path string, h interface{}, m ...interface{}) echo.IRouter
	WPost    func(path string, h interface{}, m ...interface{}) echo.IRouter
	WPre     func(middleware ...interface{})
	WPrefix  func() string
	WPut     func(path string, h interface{}, m ...interface{}) echo.IRouter
	WRoute   func(methods string, path string, h interface{}, middleware ...interface{}) echo.IRouter
	WStatic  func(prefix string, root string)
	WTrace   func(path string, h interface{}, m ...interface{}) echo.IRouter
	WUse     func(middleware ...interface{})
}

func (W _github_com_webx_top_echo_RouteRegister) Any(path string, h interface{}, middleware ...interface{}) echo.IRouter {
	return W.WAny(path, h, middleware...)
}
func (W _github_com_webx_top_echo_RouteRegister) Connect(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WConnect(path, h, m...)
}
func (W _github_com_webx_top_echo_RouteRegister) Delete(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WDelete(path, h, m...)
}
func (W _github_com_webx_top_echo_RouteRegister) File(path string, file string) {
	W.WFile(path, file)
}
func (W _github_com_webx_top_echo_RouteRegister) Get(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WGet(path, h, m...)
}
func (W _github_com_webx_top_echo_RouteRegister) Group(prefix string, middleware ...interface{}) *echo.Group {
	return W.WGroup(prefix, middleware...)
}
func (W _github_com_webx_top_echo_RouteRegister) Head(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WHead(path, h, m...)
}
func (W _github_com_webx_top_echo_RouteRegister) Match(methods []string, path string, h interface{}, middleware ...interface{}) echo.IRouter {
	return W.WMatch(methods, path, h, middleware...)
}
func (W _github_com_webx_top_echo_RouteRegister) Options(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WOptions(path, h, m...)
}
func (W _github_com_webx_top_echo_RouteRegister) Patch(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WPatch(path, h, m...)
}
func (W _github_com_webx_top_echo_RouteRegister) Post(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WPost(path, h, m...)
}
func (W _github_com_webx_top_echo_RouteRegister) Pre(middleware ...interface{}) {
	W.WPre(middleware...)
}
func (W _github_com_webx_top_echo_RouteRegister) Prefix() string {
	return W.WPrefix()
}
func (W _github_com_webx_top_echo_RouteRegister) Put(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WPut(path, h, m...)
}
func (W _github_com_webx_top_echo_RouteRegister) Route(methods string, path string, h interface{}, middleware ...interface{}) echo.IRouter {
	return W.WRoute(methods, path, h, middleware...)
}
func (W _github_com_webx_top_echo_RouteRegister) Static(prefix string, root string) {
	W.WStatic(prefix, root)
}
func (W _github_com_webx_top_echo_RouteRegister) Trace(path string, h interface{}, m ...interface{}) echo.IRouter {
	return W.WTrace(path, h, m...)
}
func (W _github_com_webx_top_echo_RouteRegister) Use(middleware ...interface{}) {
	W.WUse(middleware...)
}

// _github_com_webx_top_echo_Sessioner is an interface wrapper for Sessioner type
type _github_com_webx_top_echo_Sessioner struct {
	IValue          interface{}
	WAddFlash       func(value interface{}, vars ...string) echo.Sessioner
	WAddPreSaveHook func(a0 func(echo.Context) error)
	WClear          func() echo.Sessioner
	WDelete         func(key string) echo.Sessioner
	WFlashes        func(vars ...string) []interface{}
	WGet            func(key string) interface{}
	WID             func() string
	WMustID         func() string
	WRemoveID       func(sessionID string) error
	WSave           func() error
	WSet            func(key string, val interface{}) echo.Sessioner
	WSetID          func(id string, notReload ...bool) error
	WSetPreSaveHook func(a0 ...func(echo.Context) error)
}

func (W _github_com_webx_top_echo_Sessioner) AddFlash(value interface{}, vars ...string) echo.Sessioner {
	return W.WAddFlash(value, vars...)
}
func (W _github_com_webx_top_echo_Sessioner) AddPreSaveHook(a0 func(echo.Context) error) {
	W.WAddPreSaveHook(a0)
}
func (W _github_com_webx_top_echo_Sessioner) Clear() echo.Sessioner {
	return W.WClear()
}
func (W _github_com_webx_top_echo_Sessioner) Delete(key string) echo.Sessioner {
	return W.WDelete(key)
}
func (W _github_com_webx_top_echo_Sessioner) Flashes(vars ...string) []interface{} {
	return W.WFlashes(vars...)
}
func (W _github_com_webx_top_echo_Sessioner) Get(key string) interface{} {
	return W.WGet(key)
}
func (W _github_com_webx_top_echo_Sessioner) ID() string {
	return W.WID()
}
func (W _github_com_webx_top_echo_Sessioner) MustID() string {
	return W.WMustID()
}
func (W _github_com_webx_top_echo_Sessioner) RemoveID(sessionID string) error {
	return W.WRemoveID(sessionID)
}
func (W _github_com_webx_top_echo_Sessioner) Save() error {
	return W.WSave()
}
func (W _github_com_webx_top_echo_Sessioner) Set(key string, val interface{}) echo.Sessioner {
	return W.WSet(key, val)
}
func (W _github_com_webx_top_echo_Sessioner) SetID(id string, notReload ...bool) error {
	return W.WSetID(id, notReload...)
}
func (W _github_com_webx_top_echo_Sessioner) SetPreSaveHook(a0 ...func(echo.Context) error) {
	W.WSetPreSaveHook(a0...)
}

// _github_com_webx_top_echo_Template is an interface wrapper for Template type
type _github_com_webx_top_echo_Template struct {
	IValue    interface{}
	WTemplate func(a0 echo.Context) (string, error)
}

func (W _github_com_webx_top_echo_Template) Template(a0 echo.Context) (string, error) {
	return W.WTemplate(a0)
}

// _github_com_webx_top_echo_ToConversion is an interface wrapper for ToConversion type
type _github_com_webx_top_echo_ToConversion struct {
	IValue    interface{}
	WToString func() string
}

func (W _github_com_webx_top_echo_ToConversion) ToString() string {
	return W.WToString()
}

// _github_com_webx_top_echo_Transaction is an interface wrapper for Transaction type
type _github_com_webx_top_echo_Transaction struct {
	IValue    interface{}
	WBegin    func(ctx context.Context) error
	WCommit   func(ctx context.Context) error
	WEnd      func(ctx context.Context, succeed bool) error
	WRollback func(ctx context.Context) error
}

func (W _github_com_webx_top_echo_Transaction) Begin(ctx context.Context) error {
	return W.WBegin(ctx)
}
func (W _github_com_webx_top_echo_Transaction) Commit(ctx context.Context) error {
	return W.WCommit(ctx)
}
func (W _github_com_webx_top_echo_Transaction) End(ctx context.Context, succeed bool) error {
	return W.WEnd(ctx, succeed)
}
func (W _github_com_webx_top_echo_Transaction) Rollback(ctx context.Context) error {
	return W.WRollback(ctx)
}

// _github_com_webx_top_echo_Translator is an interface wrapper for Translator type
type _github_com_webx_top_echo_Translator struct {
	IValue interface{}
	WE     func(format string, args ...interface{}) error
	WLang  func() echo.LangCode
	WT     func(format string, args ...interface{}) string
}

func (W _github_com_webx_top_echo_Translator) E(format string, args ...interface{}) error {
	return W.WE(format, args...)
}
func (W _github_com_webx_top_echo_Translator) Lang() echo.LangCode {
	return W.WLang()
}
func (W _github_com_webx_top_echo_Translator) T(format string, args ...interface{}) string {
	return W.WT(format, args...)
}

// _github_com_webx_top_echo_URLBuilder is an interface wrapper for URLBuilder type
type _github_com_webx_top_echo_URLBuilder struct {
	IValue interface{}
	WURL   func(a0 interface{}, a1 ...interface{}) string
}

func (W _github_com_webx_top_echo_URLBuilder) URL(a0 interface{}, a1 ...interface{}) string {
	return W.WURL(a0, a1...)
}

// _github_com_webx_top_echo_UnwrapTransaction is an interface wrapper for UnwrapTransaction type
type _github_com_webx_top_echo_UnwrapTransaction struct {
	IValue  interface{}
	WUnwrap func() echo.Transaction
}

func (W _github_com_webx_top_echo_UnwrapTransaction) Unwrap() echo.Transaction {
	return W.WUnwrap()
}

// _github_com_webx_top_echo_ValidateResult is an interface wrapper for ValidateResult type
type _github_com_webx_top_echo_ValidateResult struct {
	IValue    interface{}
	WAsError  func() error
	WError    func() string
	WField    func() string
	WOk       func() bool
	WRaw      func() interface{}
	WSetError func(a0 error) echo.ValidateResult
	WSetField func(a0 string) echo.ValidateResult
	WSetRaw   func(a0 interface{}) echo.ValidateResult
	WUnwrap   func() error
}

func (W _github_com_webx_top_echo_ValidateResult) AsError() error {
	return W.WAsError()
}
func (W _github_com_webx_top_echo_ValidateResult) Error() string {
	return W.WError()
}
func (W _github_com_webx_top_echo_ValidateResult) Field() string {
	return W.WField()
}
func (W _github_com_webx_top_echo_ValidateResult) Ok() bool {
	return W.WOk()
}
func (W _github_com_webx_top_echo_ValidateResult) Raw() interface{} {
	return W.WRaw()
}
func (W _github_com_webx_top_echo_ValidateResult) SetError(a0 error) echo.ValidateResult {
	return W.WSetError(a0)
}
func (W _github_com_webx_top_echo_ValidateResult) SetField(a0 string) echo.ValidateResult {
	return W.WSetField(a0)
}
func (W _github_com_webx_top_echo_ValidateResult) SetRaw(a0 interface{}) echo.ValidateResult {
	return W.WSetRaw(a0)
}
func (W _github_com_webx_top_echo_ValidateResult) Unwrap() error {
	return W.WUnwrap()
}

// _github_com_webx_top_echo_Validator is an interface wrapper for Validator type
type _github_com_webx_top_echo_Validator struct {
	IValue    interface{}
	WValidate func(i interface{}, args ...interface{}) echo.ValidateResult
}

func (W _github_com_webx_top_echo_Validator) Validate(i interface{}, args ...interface{}) echo.ValidateResult {
	return W.WValidate(i, args...)
}

// _github_com_webx_top_echo_ValueDecodersGetter is an interface wrapper for ValueDecodersGetter type
type _github_com_webx_top_echo_ValueDecodersGetter struct {
	IValue         interface{}
	WValueDecoders func(a0 echo.Context) echo.BinderValueCustomDecoders
}

func (W _github_com_webx_top_echo_ValueDecodersGetter) ValueDecoders(a0 echo.Context) echo.BinderValueCustomDecoders {
	return W.WValueDecoders(a0)
}

// _github_com_webx_top_echo_ValueEncodersGetter is an interface wrapper for ValueEncodersGetter type
type _github_com_webx_top_echo_ValueEncodersGetter struct {
	IValue         interface{}
	WValueEncoders func(a0 echo.Context) echo.BinderValueCustomEncoders
}

func (W _github_com_webx_top_echo_ValueEncodersGetter) ValueEncoders(a0 echo.Context) echo.BinderValueCustomEncoders {
	return W.WValueEncoders(a0)
}

// _github_com_webx_top_echo_ValueStringersGetter is an interface wrapper for ValueStringersGetter type
type _github_com_webx_top_echo_ValueStringersGetter struct {
	IValue          interface{}
	WValueStringers func(a0 echo.Context) param.StringerMap
}

func (W _github_com_webx_top_echo_ValueStringersGetter) ValueStringers(a0 echo.Context) param.StringerMap {
	return W.WValueStringers(a0)
}

// _github_com_webx_top_echo_XMLModifer is an interface wrapper for XMLModifer type
type _github_com_webx_top_echo_XMLModifer struct {
	IValue interface{}
	WXML   func(a0 echo.Context) (interface{}, error)
}

func (W _github_com_webx_top_echo_XMLModifer) XML(a0 echo.Context) (interface{}, error) {
	return W.WXML(a0)
}
