// Code generated by 'yaegi extract github.com/coscms/webcore/library/module'. DO NOT EDIT.

package lib

import (
	"github.com/coscms/webcore/library/dashboard"
	"github.com/coscms/webcore/library/module"
	"github.com/coscms/webcore/library/navigate"
	"github.com/coscms/webcore/library/route"
	"reflect"
)

func init() {
	Symbols["github.com/coscms/webcore/library/module/module"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewDashboard":       reflect.ValueOf(module.NewDashboard),
		"NewNavigate":        reflect.ValueOf(module.NewNavigate),
		"NewRouter":          reflect.ValueOf(module.NewRouter),
		"NgingPluginDir":     reflect.ValueOf(&module.NgingPluginDir).Elem(),
		"Register":           reflect.ValueOf(module.Register),
		"SetAssets":          reflect.ValueOf(module.SetAssets),
		"SetBackendAssets":   reflect.ValueOf(module.SetBackendAssets),
		"SetBackendTemplate": reflect.ValueOf(module.SetBackendTemplate),
		"SetTemplate":        reflect.ValueOf(module.SetTemplate),
		"WebCoreDir":         reflect.ValueOf(&module.WebCoreDir).Elem(),

		// type definitions
		"Dashboard": reflect.ValueOf((*module.Dashboard)(nil)),
		"IModule":   reflect.ValueOf((*module.IModule)(nil)),
		"Module":    reflect.ValueOf((*module.Module)(nil)),
		"Navigate":  reflect.ValueOf((*module.Navigate)(nil)),
		"Router":    reflect.ValueOf((*module.Router)(nil)),

		// interface wrapper definitions
		"_Dashboard": reflect.ValueOf((*_github_com_coscms_webcore_library_module_Dashboard)(nil)),
		"_IModule":   reflect.ValueOf((*_github_com_coscms_webcore_library_module_IModule)(nil)),
		"_Navigate":  reflect.ValueOf((*_github_com_coscms_webcore_library_module_Navigate)(nil)),
		"_Router":    reflect.ValueOf((*_github_com_coscms_webcore_library_module_Router)(nil)),
	}
}

// _github_com_coscms_webcore_library_module_Dashboard is an interface wrapper for Dashboard type
type _github_com_coscms_webcore_library_module_Dashboard struct {
	IValue    interface{}
	WBackend  func() *dashboard.Dashboard
	WFrontend func() *dashboard.Dashboard
}

func (W _github_com_coscms_webcore_library_module_Dashboard) Backend() *dashboard.Dashboard {
	return W.WBackend()
}
func (W _github_com_coscms_webcore_library_module_Dashboard) Frontend() *dashboard.Dashboard {
	return W.WFrontend()
}

// _github_com_coscms_webcore_library_module_IModule is an interface wrapper for IModule type
type _github_com_coscms_webcore_library_module_IModule struct {
	IValue   interface{}
	WApply   func()
	WVersion func() float64
}

func (W _github_com_coscms_webcore_library_module_IModule) Apply() {
	W.WApply()
}
func (W _github_com_coscms_webcore_library_module_IModule) Version() float64 {
	return W.WVersion()
}

// _github_com_coscms_webcore_library_module_Navigate is an interface wrapper for Navigate type
type _github_com_coscms_webcore_library_module_Navigate struct {
	IValue    interface{}
	WBackend  func() *navigate.ProjectNavigates
	WFrontend func() *navigate.ProjectNavigates
}

func (W _github_com_coscms_webcore_library_module_Navigate) Backend() *navigate.ProjectNavigates {
	return W.WBackend()
}
func (W _github_com_coscms_webcore_library_module_Navigate) Frontend() *navigate.ProjectNavigates {
	return W.WFrontend()
}

// _github_com_coscms_webcore_library_module_Router is an interface wrapper for Router type
type _github_com_coscms_webcore_library_module_Router struct {
	IValue    interface{}
	WBackend  func() route.IRegister
	WFrontend func() route.IRegister
}

func (W _github_com_coscms_webcore_library_module_Router) Backend() route.IRegister {
	return W.WBackend()
}
func (W _github_com_coscms_webcore_library_module_Router) Frontend() route.IRegister {
	return W.WFrontend()
}
